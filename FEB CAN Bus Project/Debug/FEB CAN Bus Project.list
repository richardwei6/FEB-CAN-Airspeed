
FEB CAN Bus Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003990  08003990  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003998  08003998  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003a08  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003a08  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009017  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019a8  00000000  00000000  000290f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0002aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070b  00000000  00000000  0002b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000220ec  00000000  00000000  0002baeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b981  00000000  00000000  0004dbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc609  00000000  00000000  00059558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d54  00000000  00000000  00125b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001288b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003908 	.word	0x08003908

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003908 	.word	0x08003908

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 faef 	bl	8000b94 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f83b 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8fb 	bl	80007b4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80005be:	f000 f897 	bl	80006f0 <MX_CAN1_Init>
  MX_I2C1_Init();
 80005c2:	f000 f8c9 	bl	8000758 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// -- reset data buffer
	memset(dataBuffer, 0x00, dlc);
 80005c6:	2308      	movs	r3, #8
 80005c8:	461a      	mov	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	4813      	ldr	r0, [pc, #76]	; (800061c <main+0x70>)
 80005ce:	f002 fb3b 	bl	8002c48 <memset>

	// -- receive i2c data from MS4525DO

	// receive with 8 bytes, 1000 ms timeout with MS4525DO address at 0x40 [replace with actual address]
	HAL_I2C_Master_Receive(&hi2c1, 0x40, (uint8_t*)dataBuffer, 8, 1000);
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2308      	movs	r3, #8
 80005da:	4a10      	ldr	r2, [pc, #64]	; (800061c <main+0x70>)
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	4810      	ldr	r0, [pc, #64]	; (8000620 <main+0x74>)
 80005e0:	f001 f902 	bl	80017e8 <HAL_I2C_Master_Receive>
	HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f000 fb47 	bl	8000c78 <HAL_Delay>

	// --- send data over CAN

	CAN_TxHeaderTypeDef header;

	header.IDE = CAN_ID_STD; // standard CAN message size (11 bits)
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
	header.StdId = 0x14; // CAN ID = 20
 80005ee:	2314      	movs	r3, #20
 80005f0:	603b      	str	r3, [r7, #0]
	header.RTR = CAN_RTR_DATA; // RTR bit to send a frame
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
	header.DLC = dlc; // data length code
 80005f6:	2308      	movs	r3, #8
 80005f8:	613b      	str	r3, [r7, #16]

	if (HAL_CAN_AddTxMessage(&hcan1, &header, dataBuffer, &canTxMailbox) != HAL_OK){
 80005fa:	4639      	mov	r1, r7
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <main+0x78>)
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <main+0x70>)
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <main+0x7c>)
 8000602:	f000 fc58 	bl	8000eb6 <HAL_CAN_AddTxMessage>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <main+0x66>
		printf("ERROR: unable to send CAN message");
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <main+0x80>)
 800060e:	f002 fb09 	bl	8002c24 <iprintf>
	}

	HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f000 fb30 	bl	8000c78 <HAL_Delay>
  {
 8000618:	e7d5      	b.n	80005c6 <main+0x1a>
 800061a:	bf00      	nop
 800061c:	20000104 	.word	0x20000104
 8000620:	200000ac 	.word	0x200000ac
 8000624:	20000100 	.word	0x20000100
 8000628:	20000084 	.word	0x20000084
 800062c:	08003920 	.word	0x08003920

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fb02 	bl	8002c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xb8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <SystemClock_Config+0xb8>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemClock_Config+0xb8>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <SystemClock_Config+0xbc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemClock_Config+0xbc>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <SystemClock_Config+0xbc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 ff6f 	bl	8002588 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b0:	f000 f8a8 	bl	8000804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fcaa 	bl	8002028 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006da:	f000 f893 	bl	8000804 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_CAN1_Init+0x60>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_CAN1_Init+0x64>)
 80006f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_CAN1_Init+0x60>)
 80006fc:	2210      	movs	r2, #16
 80006fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_CAN1_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_CAN1_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_CAN1_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_CAN1_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_CAN1_Init+0x60>)
 800071a:	2200      	movs	r2, #0
 800071c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_CAN1_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <MX_CAN1_Init+0x60>)
 8000726:	2200      	movs	r2, #0
 8000728:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_CAN1_Init+0x60>)
 800072c:	2200      	movs	r2, #0
 800072e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <MX_CAN1_Init+0x60>)
 8000732:	2200      	movs	r2, #0
 8000734:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_CAN1_Init+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_CAN1_Init+0x60>)
 800073e:	f000 fabf 	bl	8000cc0 <HAL_CAN_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000748:	f000 f85c 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000084 	.word	0x20000084
 8000754:	40006400 	.word	0x40006400

08000758 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	; (80007ac <MX_I2C1_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_I2C1_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_I2C1_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_I2C1_Init+0x50>)
 8000796:	f000 fee3 	bl	8001560 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 f830 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000ac 	.word	0x200000ac
 80007ac:	40005400 	.word	0x40005400
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_GPIO_Init+0x4c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <HAL_MspInit+0x4c>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <HAL_MspInit+0x4c>)
 8000820:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_MspInit+0x4c>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <HAL_MspInit+0x4c>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	; 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <HAL_CAN_MspInit+0x84>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d12c      	bne.n	80008dc <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_CAN_MspInit+0x88>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <HAL_CAN_MspInit+0x88>)
 800088c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_CAN_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_CAN_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_CAN_MspInit+0x88>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_CAN_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008cc:	2309      	movs	r3, #9
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_CAN_MspInit+0x8c>)
 80008d8:	f000 fcae 	bl	8001238 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40006400 	.word	0x40006400
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020000 	.word	0x40020000

080008f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	; (8000974 <HAL_I2C_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12b      	bne.n	800096a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <HAL_I2C_MspInit+0x88>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800092e:	23c0      	movs	r3, #192	; 0xc0
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000932:	2312      	movs	r3, #18
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093e:	2304      	movs	r3, #4
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <HAL_I2C_MspInit+0x8c>)
 800094a:	f000 fc75 	bl	8001238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_I2C_MspInit+0x88>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40005400 	.word	0x40005400
 8000978:	40023800 	.word	0x40023800
 800097c:	40020400 	.word	0x40020400

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f934 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e00a      	b.n	80009fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009e6:	f3af 8000 	nop.w
 80009ea:	4601      	mov	r1, r0
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	b2ca      	uxtb	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf0      	blt.n	80009e6 <_read+0x12>
  }

  return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e009      	b.n	8000a34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf1      	blt.n	8000a20 <_write+0x12>
  }
  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_close>:

int _close(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_isatty>:

int _isatty(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f002 f8ba 	bl	8002c58 <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20020000 	.word	0x20020000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	2000010c 	.word	0x2000010c
 8000b18:	20000260 	.word	0x20000260

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <SystemInit+0x20>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <SystemInit+0x20>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b5c:	4c0b      	ldr	r4, [pc, #44]	; (8000b8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b6a:	f7ff ffd7 	bl	8000b1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f002 f879 	bl	8002c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b72:	f7ff fd1b 	bl	80005ac <main>
  bx  lr    
 8000b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b84:	080039a0 	.word	0x080039a0
  ldr r2, =_sbss
 8000b88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b8c:	20000260 	.word	0x20000260

08000b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <HAL_Init+0x40>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_Init+0x40>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_Init+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 fb07 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	200f      	movs	r0, #15
 8000bc4:	f000 f808 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fe22 	bl	8000810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x54>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x58>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fb11 	bl	800121e <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00e      	b.n	8000c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d80a      	bhi.n	8000c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c14:	f000 fae7 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_InitTick+0x5c>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000110 	.word	0x20000110

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000110 	.word	0x20000110

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d101      	bne.n	8000cd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e0ed      	b.n	8000eae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d102      	bne.n	8000ce4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fdbe 	bl	8000860 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f042 0201 	orr.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cf4:	f7ff ffb4 	bl	8000c60 <HAL_GetTick>
 8000cf8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cfa:	e012      	b.n	8000d22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cfc:	f7ff ffb0 	bl	8000c60 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b0a      	cmp	r3, #10
 8000d08:	d90b      	bls.n	8000d22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2205      	movs	r2, #5
 8000d1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e0c5      	b.n	8000eae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0e5      	beq.n	8000cfc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0202 	bic.w	r2, r2, #2
 8000d3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d40:	f7ff ff8e 	bl	8000c60 <HAL_GetTick>
 8000d44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d46:	e012      	b.n	8000d6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d48:	f7ff ff8a 	bl	8000c60 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b0a      	cmp	r3, #10
 8000d54:	d90b      	bls.n	8000d6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2205      	movs	r2, #5
 8000d66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e09f      	b.n	8000eae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1e5      	bne.n	8000d48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7e1b      	ldrb	r3, [r3, #24]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d108      	bne.n	8000d96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e007      	b.n	8000da6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7e5b      	ldrb	r3, [r3, #25]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d108      	bne.n	8000dc0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7e9b      	ldrb	r3, [r3, #26]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0220 	orr.w	r2, r2, #32
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e007      	b.n	8000dfa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0220 	bic.w	r2, r2, #32
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7edb      	ldrb	r3, [r3, #27]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0210 	bic.w	r2, r2, #16
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f042 0210 	orr.w	r2, r2, #16
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	7f1b      	ldrb	r3, [r3, #28]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d108      	bne.n	8000e3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 0208 	orr.w	r2, r2, #8
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	e007      	b.n	8000e4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0208 	bic.w	r2, r2, #8
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7f5b      	ldrb	r3, [r3, #29]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d108      	bne.n	8000e68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 0204 	orr.w	r2, r2, #4
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e007      	b.n	8000e78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0204 	bic.w	r2, r2, #4
 8000e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	431a      	orrs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	ea42 0103 	orr.w	r1, r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b089      	sub	sp, #36	; 0x24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eca:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ed4:	7ffb      	ldrb	r3, [r7, #31]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d003      	beq.n	8000ee2 <HAL_CAN_AddTxMessage+0x2c>
 8000eda:	7ffb      	ldrb	r3, [r7, #31]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	f040 80b8 	bne.w	8001052 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10a      	bne.n	8000f02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d105      	bne.n	8000f02 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80a0 	beq.w	8001042 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	0e1b      	lsrs	r3, r3, #24
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d907      	bls.n	8000f22 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e09e      	b.n	8001060 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f22:	2201      	movs	r2, #1
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10d      	bne.n	8000f50 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f3e:	68f9      	ldr	r1, [r7, #12]
 8000f40:	6809      	ldr	r1, [r1, #0]
 8000f42:	431a      	orrs	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3318      	adds	r3, #24
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	440b      	add	r3, r1
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e00f      	b.n	8000f70 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f5a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f64:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3318      	adds	r3, #24
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	440b      	add	r3, r1
 8000f6e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6819      	ldr	r1, [r3, #0]
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3318      	adds	r3, #24
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	440b      	add	r3, r1
 8000f80:	3304      	adds	r3, #4
 8000f82:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	7d1b      	ldrb	r3, [r3, #20]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d111      	bne.n	8000fb0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3318      	adds	r3, #24
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	4413      	add	r3, r2
 8000f98:	3304      	adds	r3, #4
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	6811      	ldr	r1, [r2, #0]
 8000fa0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3318      	adds	r3, #24
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	440b      	add	r3, r1
 8000fac:	3304      	adds	r3, #4
 8000fae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3307      	adds	r3, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	061a      	lsls	r2, r3, #24
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3306      	adds	r3, #6
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	041b      	lsls	r3, r3, #16
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3305      	adds	r3, #5
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	3204      	adds	r2, #4
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	6811      	ldr	r1, [r2, #0]
 8000fd8:	ea43 0200 	orr.w	r2, r3, r0
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	440b      	add	r3, r1
 8000fe2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000fe6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3303      	adds	r3, #3
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	061a      	lsls	r2, r3, #24
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	041b      	lsls	r3, r3, #16
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	4313      	orrs	r3, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	4610      	mov	r0, r2
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	6811      	ldr	r1, [r2, #0]
 800100e:	ea43 0200 	orr.w	r2, r3, r0
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	440b      	add	r3, r1
 8001018:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800101c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3318      	adds	r3, #24
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	6811      	ldr	r1, [r2, #0]
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3318      	adds	r3, #24
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	440b      	add	r3, r1
 800103c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e00e      	b.n	8001060 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e006      	b.n	8001060 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
  }
}
 8001060:	4618      	mov	r0, r3
 8001062:	3724      	adds	r7, #36	; 0x24
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff47 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff5c 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffb0 	bl	800118c <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e165      	b.n	8001520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8154 	bne.w	800151a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b01      	cmp	r3, #1
 800127c:	d005      	beq.n	800128a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	2b02      	cmp	r3, #2
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d017      	beq.n	8001328 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80ae 	beq.w	800151a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_GPIO_Init+0x300>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a5c      	ldr	r2, [pc, #368]	; (8001538 <HAL_GPIO_Init+0x300>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <HAL_GPIO_Init+0x300>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013da:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_GPIO_Init+0x304>)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	089b      	lsrs	r3, r3, #2
 80013e0:	3302      	adds	r3, #2
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a4f      	ldr	r2, [pc, #316]	; (8001540 <HAL_GPIO_Init+0x308>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x21a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4e      	ldr	r2, [pc, #312]	; (8001544 <HAL_GPIO_Init+0x30c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x216>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4d      	ldr	r2, [pc, #308]	; (8001548 <HAL_GPIO_Init+0x310>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x212>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4c      	ldr	r2, [pc, #304]	; (800154c <HAL_GPIO_Init+0x314>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x20e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4b      	ldr	r2, [pc, #300]	; (8001550 <HAL_GPIO_Init+0x318>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x20a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4a      	ldr	r2, [pc, #296]	; (8001554 <HAL_GPIO_Init+0x31c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x206>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a49      	ldr	r2, [pc, #292]	; (8001558 <HAL_GPIO_Init+0x320>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x202>
 8001436:	2306      	movs	r3, #6
 8001438:	e00c      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 800143a:	2307      	movs	r3, #7
 800143c:	e00a      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 800143e:	2305      	movs	r3, #5
 8001440:	e008      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 8001442:	2304      	movs	r3, #4
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 8001446:	2303      	movs	r3, #3
 8001448:	e004      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 800144a:	2302      	movs	r3, #2
 800144c:	e002      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <HAL_GPIO_Init+0x21c>
 8001452:	2300      	movs	r3, #0
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	f002 0203 	and.w	r2, r2, #3
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	4093      	lsls	r3, r2
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001464:	4935      	ldr	r1, [pc, #212]	; (800153c <HAL_GPIO_Init+0x304>)
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_GPIO_Init+0x324>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001496:	4a31      	ldr	r2, [pc, #196]	; (800155c <HAL_GPIO_Init+0x324>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_GPIO_Init+0x324>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c0:	4a26      	ldr	r2, [pc, #152]	; (800155c <HAL_GPIO_Init+0x324>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_GPIO_Init+0x324>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <HAL_GPIO_Init+0x324>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_GPIO_Init+0x324>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001514:	4a11      	ldr	r2, [pc, #68]	; (800155c <HAL_GPIO_Init+0x324>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	f67f ae96 	bls.w	8001254 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800
 800153c:	40013800 	.word	0x40013800
 8001540:	40020000 	.word	0x40020000
 8001544:	40020400 	.word	0x40020400
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40021000 	.word	0x40021000
 8001554:	40021400 	.word	0x40021400
 8001558:	40021800 	.word	0x40021800
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e12b      	b.n	80017ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff f9b2 	bl	80008f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	; 0x24
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c4:	f000 fe22 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a81      	ldr	r2, [pc, #516]	; (80017d4 <HAL_I2C_Init+0x274>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d807      	bhi.n	80015e4 <HAL_I2C_Init+0x84>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a80      	ldr	r2, [pc, #512]	; (80017d8 <HAL_I2C_Init+0x278>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf94      	ite	ls
 80015dc:	2301      	movls	r3, #1
 80015de:	2300      	movhi	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	e006      	b.n	80015f2 <HAL_I2C_Init+0x92>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4a7d      	ldr	r2, [pc, #500]	; (80017dc <HAL_I2C_Init+0x27c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	bf94      	ite	ls
 80015ec:	2301      	movls	r3, #1
 80015ee:	2300      	movhi	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0e7      	b.n	80017ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4a78      	ldr	r2, [pc, #480]	; (80017e0 <HAL_I2C_Init+0x280>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4a6a      	ldr	r2, [pc, #424]	; (80017d4 <HAL_I2C_Init+0x274>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d802      	bhi.n	8001634 <HAL_I2C_Init+0xd4>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3301      	adds	r3, #1
 8001632:	e009      	b.n	8001648 <HAL_I2C_Init+0xe8>
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	4a69      	ldr	r2, [pc, #420]	; (80017e4 <HAL_I2C_Init+0x284>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	3301      	adds	r3, #1
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	430b      	orrs	r3, r1
 800164e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800165a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	495c      	ldr	r1, [pc, #368]	; (80017d4 <HAL_I2C_Init+0x274>)
 8001664:	428b      	cmp	r3, r1
 8001666:	d819      	bhi.n	800169c <HAL_I2C_Init+0x13c>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e59      	subs	r1, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fbb1 f3f3 	udiv	r3, r1, r3
 8001676:	1c59      	adds	r1, r3, #1
 8001678:	f640 73fc 	movw	r3, #4092	; 0xffc
 800167c:	400b      	ands	r3, r1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00a      	beq.n	8001698 <HAL_I2C_Init+0x138>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e59      	subs	r1, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001690:	3301      	adds	r3, #1
 8001692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001696:	e051      	b.n	800173c <HAL_I2C_Init+0x1dc>
 8001698:	2304      	movs	r3, #4
 800169a:	e04f      	b.n	800173c <HAL_I2C_Init+0x1dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d111      	bne.n	80016c8 <HAL_I2C_Init+0x168>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1e58      	subs	r0, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	e012      	b.n	80016ee <HAL_I2C_Init+0x18e>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e58      	subs	r0, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	0099      	lsls	r1, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	fbb0 f3f3 	udiv	r3, r0, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_I2C_Init+0x196>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e022      	b.n	800173c <HAL_I2C_Init+0x1dc>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10e      	bne.n	800171c <HAL_I2C_Init+0x1bc>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e58      	subs	r0, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6859      	ldr	r1, [r3, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	440b      	add	r3, r1
 800170c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001710:	3301      	adds	r3, #1
 8001712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800171a:	e00f      	b.n	800173c <HAL_I2C_Init+0x1dc>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	1e58      	subs	r0, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	0099      	lsls	r1, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001732:	3301      	adds	r3, #1
 8001734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001738:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	6809      	ldr	r1, [r1, #0]
 8001740:	4313      	orrs	r3, r2
 8001742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800176a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6911      	ldr	r1, [r2, #16]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68d2      	ldr	r2, [r2, #12]
 8001776:	4311      	orrs	r1, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	430b      	orrs	r3, r1
 800177e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695a      	ldr	r2, [r3, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0201 	orr.w	r2, r2, #1
 80017aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	000186a0 	.word	0x000186a0
 80017d8:	001e847f 	.word	0x001e847f
 80017dc:	003d08ff 	.word	0x003d08ff
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	10624dd3 	.word	0x10624dd3

080017e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	; 0x30
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	461a      	mov	r2, r3
 80017f4:	460b      	mov	r3, r1
 80017f6:	817b      	strh	r3, [r7, #10]
 80017f8:	4613      	mov	r3, r2
 80017fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff fa30 	bl	8000c60 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b20      	cmp	r3, #32
 800180c:	f040 820b 	bne.w	8001c26 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2319      	movs	r3, #25
 8001816:	2201      	movs	r2, #1
 8001818:	497c      	ldr	r1, [pc, #496]	; (8001a0c <HAL_I2C_Master_Receive+0x224>)
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fad8 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001826:	2302      	movs	r3, #2
 8001828:	e1fe      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_I2C_Master_Receive+0x50>
 8001834:	2302      	movs	r3, #2
 8001836:	e1f7      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b01      	cmp	r3, #1
 800184c:	d007      	beq.n	800185e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2222      	movs	r2, #34	; 0x22
 8001872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2210      	movs	r2, #16
 800187a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	893a      	ldrh	r2, [r7, #8]
 800188e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4a5c      	ldr	r2, [pc, #368]	; (8001a10 <HAL_I2C_Master_Receive+0x228>)
 800189e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a0:	8979      	ldrh	r1, [r7, #10]
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f9c4 	bl	8001c34 <I2C_MasterRequestRead>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e1b8      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d113      	bne.n	80018e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	e18c      	b.n	8001c00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d11b      	bne.n	8001926 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e16c      	b.n	8001c00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192a:	2b02      	cmp	r3, #2
 800192c:	d11b      	bne.n	8001966 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800193c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800194c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	e14c      	b.n	8001c00 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800198c:	e138      	b.n	8001c00 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001992:	2b03      	cmp	r3, #3
 8001994:	f200 80f1 	bhi.w	8001b7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	2b01      	cmp	r3, #1
 800199e:	d123      	bne.n	80019e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fae9 	bl	8001f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e139      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	3b01      	subs	r3, #1
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019e6:	e10b      	b.n	8001c00 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d14e      	bne.n	8001a8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	2200      	movs	r2, #0
 80019f8:	4906      	ldr	r1, [pc, #24]	; (8001a14 <HAL_I2C_Master_Receive+0x22c>)
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f9e8 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e10e      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
 8001a0a:	bf00      	nop
 8001a0c:	00100002 	.word	0x00100002
 8001a10:	ffff0000 	.word	0xffff0000
 8001a14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a8c:	e0b8      	b.n	8001c00 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a94:	2200      	movs	r2, #0
 8001a96:	4966      	ldr	r1, [pc, #408]	; (8001c30 <HAL_I2C_Master_Receive+0x448>)
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f999 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0bf      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	2200      	movs	r2, #0
 8001af2:	494f      	ldr	r1, [pc, #316]	; (8001c30 <HAL_I2C_Master_Receive+0x448>)
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f96b 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e091      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691a      	ldr	r2, [r3, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b78:	e042      	b.n	8001c00 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f9fc 	bl	8001f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e04c      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d118      	bne.n	8001c00 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f aec2 	bne.w	800198e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
  }
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	00010004 	.word	0x00010004

08001c34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	460b      	mov	r3, r1
 8001c42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d006      	beq.n	8001c6e <I2C_MasterRequestRead+0x3a>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d003      	beq.n	8001c6e <I2C_MasterRequestRead+0x3a>
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c6c:	d108      	bne.n	8001c80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e00b      	b.n	8001c98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	2b11      	cmp	r3, #17
 8001c86:	d107      	bne.n	8001c98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f893 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00d      	beq.n	8001ccc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cbe:	d103      	bne.n	8001cc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e079      	b.n	8001dc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cd4:	d108      	bne.n	8001ce8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cd6:	897b      	ldrh	r3, [r7, #10]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	e05f      	b.n	8001da8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ce8:	897b      	ldrh	r3, [r7, #10]
 8001cea:	11db      	asrs	r3, r3, #7
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	f003 0306 	and.w	r3, r3, #6
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f063 030f 	orn	r3, r3, #15
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	4930      	ldr	r1, [pc, #192]	; (8001dc8 <I2C_MasterRequestRead+0x194>)
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 f8b9 	bl	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e054      	b.n	8001dc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4929      	ldr	r1, [pc, #164]	; (8001dcc <I2C_MasterRequestRead+0x198>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8a9 	bl	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e044      	b.n	8001dc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f831 	bl	8001dd0 <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00d      	beq.n	8001d90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d82:	d103      	bne.n	8001d8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e017      	b.n	8001dc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001d90:	897b      	ldrh	r3, [r7, #10]
 8001d92:	11db      	asrs	r3, r3, #7
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f003 0306 	and.w	r3, r3, #6
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f063 030e 	orn	r3, r3, #14
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4907      	ldr	r1, [pc, #28]	; (8001dcc <I2C_MasterRequestRead+0x198>)
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f865 	bl	8001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	00010008 	.word	0x00010008
 8001dcc:	00010002 	.word	0x00010002

08001dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de0:	e025      	b.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001de8:	d021      	beq.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dea:	f7fe ff39 	bl	8000c60 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d302      	bcc.n	8001e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d116      	bne.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2220      	movs	r2, #32
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f043 0220 	orr.w	r2, r3, #32
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e023      	b.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10d      	bne.n	8001e54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	4013      	ands	r3, r2
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	e00c      	b.n	8001e6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d0b6      	beq.n	8001de2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	60f8      	str	r0, [r7, #12]
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e8c:	e051      	b.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9c:	d123      	bne.n	8001ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f043 0204 	orr.w	r2, r3, #4
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e046      	b.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eec:	d021      	beq.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eee:	f7fe feb7 	bl	8000c60 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d302      	bcc.n	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d116      	bne.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f043 0220 	orr.w	r2, r3, #32
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e020      	b.n	8001f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10c      	bne.n	8001f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4013      	ands	r3, r2
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	e00b      	b.n	8001f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	4013      	ands	r3, r2
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d18d      	bne.n	8001e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f88:	e042      	b.n	8002010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b10      	cmp	r3, #16
 8001f96:	d119      	bne.n	8001fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0210 	mvn.w	r2, #16
 8001fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e029      	b.n	8002020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fcc:	f7fe fe48 	bl	8000c60 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d302      	bcc.n	8001fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f043 0220 	orr.w	r2, r3, #32
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e007      	b.n	8002020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d1b5      	bne.n	8001f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0cc      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d90c      	bls.n	8002064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800209e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d044      	beq.n	8002148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d119      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e067      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4934      	ldr	r1, [pc, #208]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7fe fda2 	bl	8000c60 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fd9e 	bl	8000c60 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e04f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d20c      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	4313      	orrs	r3, r2
 800218c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f841 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fd02 	bl	8000bd8 <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	08003944 	.word	0x08003944
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_GetHCLKFreq+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000000 	.word	0x20000000

0800220c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002210:	f7ff fff0 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0a9b      	lsrs	r3, r3, #10
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4903      	ldr	r1, [pc, #12]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	08003954 	.word	0x08003954

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002238:	b0a6      	sub	sp, #152	; 0x98
 800223a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225a:	4bc8      	ldr	r3, [pc, #800]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b0c      	cmp	r3, #12
 8002264:	f200 817e 	bhi.w	8002564 <HAL_RCC_GetSysClockFreq+0x330>
 8002268:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_RCC_GetSysClockFreq+0x3c>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	080022a5 	.word	0x080022a5
 8002274:	08002565 	.word	0x08002565
 8002278:	08002565 	.word	0x08002565
 800227c:	08002565 	.word	0x08002565
 8002280:	080022ad 	.word	0x080022ad
 8002284:	08002565 	.word	0x08002565
 8002288:	08002565 	.word	0x08002565
 800228c:	08002565 	.word	0x08002565
 8002290:	080022b5 	.word	0x080022b5
 8002294:	08002565 	.word	0x08002565
 8002298:	08002565 	.word	0x08002565
 800229c:	08002565 	.word	0x08002565
 80022a0:	0800241f 	.word	0x0800241f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a4:	4bb6      	ldr	r3, [pc, #728]	; (8002580 <HAL_RCC_GetSysClockFreq+0x34c>)
 80022a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80022aa:	e15f      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ac:	4bb5      	ldr	r3, [pc, #724]	; (8002584 <HAL_RCC_GetSysClockFreq+0x350>)
 80022ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80022b2:	e15b      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b4:	4bb1      	ldr	r3, [pc, #708]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c0:	4bae      	ldr	r3, [pc, #696]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d031      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022cc:	4bab      	ldr	r3, [pc, #684]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	2200      	movs	r2, #0
 80022d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80022d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022de:	663b      	str	r3, [r7, #96]	; 0x60
 80022e0:	2300      	movs	r3, #0
 80022e2:	667b      	str	r3, [r7, #100]	; 0x64
 80022e4:	4ba7      	ldr	r3, [pc, #668]	; (8002584 <HAL_RCC_GetSysClockFreq+0x350>)
 80022e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022ea:	462a      	mov	r2, r5
 80022ec:	fb03 f202 	mul.w	r2, r3, r2
 80022f0:	2300      	movs	r3, #0
 80022f2:	4621      	mov	r1, r4
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	4aa2      	ldr	r2, [pc, #648]	; (8002584 <HAL_RCC_GetSysClockFreq+0x350>)
 80022fc:	4621      	mov	r1, r4
 80022fe:	fba1 1202 	umull	r1, r2, r1, r2
 8002302:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002304:	460a      	mov	r2, r1
 8002306:	67ba      	str	r2, [r7, #120]	; 0x78
 8002308:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800230a:	4413      	add	r3, r2
 800230c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800230e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002312:	2200      	movs	r2, #0
 8002314:	65bb      	str	r3, [r7, #88]	; 0x58
 8002316:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002318:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800231c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002320:	f7fd ffc6 	bl	80002b0 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800232e:	e064      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	099b      	lsrs	r3, r3, #6
 8002336:	2200      	movs	r2, #0
 8002338:	653b      	str	r3, [r7, #80]	; 0x50
 800233a:	657a      	str	r2, [r7, #84]	; 0x54
 800233c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002342:	64bb      	str	r3, [r7, #72]	; 0x48
 8002344:	2300      	movs	r3, #0
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002348:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800234c:	4622      	mov	r2, r4
 800234e:	462b      	mov	r3, r5
 8002350:	f04f 0000 	mov.w	r0, #0
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	0159      	lsls	r1, r3, #5
 800235a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235e:	0150      	lsls	r0, r2, #5
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4621      	mov	r1, r4
 8002366:	1a51      	subs	r1, r2, r1
 8002368:	6139      	str	r1, [r7, #16]
 800236a:	4629      	mov	r1, r5
 800236c:	eb63 0301 	sbc.w	r3, r3, r1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800237e:	4659      	mov	r1, fp
 8002380:	018b      	lsls	r3, r1, #6
 8002382:	4651      	mov	r1, sl
 8002384:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002388:	4651      	mov	r1, sl
 800238a:	018a      	lsls	r2, r1, #6
 800238c:	4651      	mov	r1, sl
 800238e:	ebb2 0801 	subs.w	r8, r2, r1
 8002392:	4659      	mov	r1, fp
 8002394:	eb63 0901 	sbc.w	r9, r3, r1
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ac:	4690      	mov	r8, r2
 80023ae:	4699      	mov	r9, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	eb18 0303 	adds.w	r3, r8, r3
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	462b      	mov	r3, r5
 80023ba:	eb49 0303 	adc.w	r3, r9, r3
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023cc:	4629      	mov	r1, r5
 80023ce:	028b      	lsls	r3, r1, #10
 80023d0:	4621      	mov	r1, r4
 80023d2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023d6:	4621      	mov	r1, r4
 80023d8:	028a      	lsls	r2, r1, #10
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e2:	2200      	movs	r2, #0
 80023e4:	643b      	str	r3, [r7, #64]	; 0x40
 80023e6:	647a      	str	r2, [r7, #68]	; 0x44
 80023e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023ec:	f7fd ff60 	bl	80002b0 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4613      	mov	r3, r2
 80023f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023fa:	4b60      	ldr	r3, [pc, #384]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	3301      	adds	r3, #1
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800240c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002414:	fbb2 f3f3 	udiv	r3, r2, r3
 8002418:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800241c:	e0a6      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241e:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242a:	4b54      	ldr	r3, [pc, #336]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d02a      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002436:	4b51      	ldr	r3, [pc, #324]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	2200      	movs	r2, #0
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002440:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002448:	2100      	movs	r1, #0
 800244a:	4b4e      	ldr	r3, [pc, #312]	; (8002584 <HAL_RCC_GetSysClockFreq+0x350>)
 800244c:	fb03 f201 	mul.w	r2, r3, r1
 8002450:	2300      	movs	r3, #0
 8002452:	fb00 f303 	mul.w	r3, r0, r3
 8002456:	4413      	add	r3, r2
 8002458:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <HAL_RCC_GetSysClockFreq+0x350>)
 800245a:	fba0 1202 	umull	r1, r2, r0, r2
 800245e:	677a      	str	r2, [r7, #116]	; 0x74
 8002460:	460a      	mov	r2, r1
 8002462:	673a      	str	r2, [r7, #112]	; 0x70
 8002464:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002466:	4413      	add	r3, r2
 8002468:	677b      	str	r3, [r7, #116]	; 0x74
 800246a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800246e:	2200      	movs	r2, #0
 8002470:	633b      	str	r3, [r7, #48]	; 0x30
 8002472:	637a      	str	r2, [r7, #52]	; 0x34
 8002474:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002478:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800247c:	f7fd ff18 	bl	80002b0 <__aeabi_uldivmod>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4613      	mov	r3, r2
 8002486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800248a:	e05b      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	2200      	movs	r2, #0
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
 8002496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
 80024a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024a8:	4642      	mov	r2, r8
 80024aa:	464b      	mov	r3, r9
 80024ac:	f04f 0000 	mov.w	r0, #0
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	0159      	lsls	r1, r3, #5
 80024b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ba:	0150      	lsls	r0, r2, #5
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4641      	mov	r1, r8
 80024c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024c6:	4649      	mov	r1, r9
 80024c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024e0:	ebb2 040a 	subs.w	r4, r2, sl
 80024e4:	eb63 050b 	sbc.w	r5, r3, fp
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	00eb      	lsls	r3, r5, #3
 80024f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024f6:	00e2      	lsls	r2, r4, #3
 80024f8:	4614      	mov	r4, r2
 80024fa:	461d      	mov	r5, r3
 80024fc:	4643      	mov	r3, r8
 80024fe:	18e3      	adds	r3, r4, r3
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	464b      	mov	r3, r9
 8002504:	eb45 0303 	adc.w	r3, r5, r3
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002516:	4629      	mov	r1, r5
 8002518:	028b      	lsls	r3, r1, #10
 800251a:	4621      	mov	r1, r4
 800251c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002520:	4621      	mov	r1, r4
 8002522:	028a      	lsls	r2, r1, #10
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800252c:	2200      	movs	r2, #0
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	61fa      	str	r2, [r7, #28]
 8002532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002536:	f7fd febb 	bl	80002b0 <__aeabi_uldivmod>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4613      	mov	r3, r2
 8002540:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_GetSysClockFreq+0x348>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	0f1b      	lsrs	r3, r3, #28
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002552:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002556:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255a:	fbb2 f3f3 	udiv	r3, r2, r3
 800255e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002562:	e003      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800256a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002570:	4618      	mov	r0, r3
 8002572:	3798      	adds	r7, #152	; 0x98
 8002574:	46bd      	mov	sp, r7
 8002576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	00f42400 	.word	0x00f42400
 8002584:	017d7840 	.word	0x017d7840

08002588 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e28d      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8083 	beq.w	80026ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025a8:	4b94      	ldr	r3, [pc, #592]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d019      	beq.n	80025e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025b4:	4b91      	ldr	r3, [pc, #580]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025c0:	4b8e      	ldr	r3, [pc, #568]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025cc:	d00c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b8b      	ldr	r3, [pc, #556]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d112      	bne.n	8002600 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025da:	4b88      	ldr	r3, [pc, #544]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e6:	d10b      	bne.n	8002600 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	4b84      	ldr	r3, [pc, #528]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d05b      	beq.n	80026ac <HAL_RCC_OscConfig+0x124>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d157      	bne.n	80026ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e25a      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d106      	bne.n	8002618 <HAL_RCC_OscConfig+0x90>
 800260a:	4b7c      	ldr	r3, [pc, #496]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7b      	ldr	r2, [pc, #492]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e01d      	b.n	8002654 <HAL_RCC_OscConfig+0xcc>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0xb4>
 8002622:	4b76      	ldr	r3, [pc, #472]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a75      	ldr	r2, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a72      	ldr	r2, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0xcc>
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6e      	ldr	r2, [pc, #440]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6b      	ldr	r2, [pc, #428]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 800264e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d013      	beq.n	8002684 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fb00 	bl	8000c60 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fafc 	bl	8000c60 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e21f      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b61      	ldr	r3, [pc, #388]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xdc>
 8002682:	e014      	b.n	80026ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe faec 	bl	8000c60 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fae8 	bl	8000c60 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e20b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269e:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x104>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d06f      	beq.n	800279a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026ba:	4b50      	ldr	r3, [pc, #320]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d017      	beq.n	80026f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026c6:	4b4d      	ldr	r3, [pc, #308]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d105      	bne.n	80026de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026d2:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026de:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d11c      	bne.n	8002724 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ea:	4b44      	ldr	r3, [pc, #272]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d116      	bne.n	8002724 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	4b41      	ldr	r3, [pc, #260]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_RCC_OscConfig+0x186>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e1d3      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270e:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4937      	ldr	r1, [pc, #220]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	e03a      	b.n	800279a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272c:	4b34      	ldr	r3, [pc, #208]	; (8002800 <HAL_RCC_OscConfig+0x278>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fa95 	bl	8000c60 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800273a:	f7fe fa91 	bl	8000c60 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1b4      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0f0      	beq.n	800273a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4925      	ldr	r1, [pc, #148]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
 800276c:	e015      	b.n	800279a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <HAL_RCC_OscConfig+0x278>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fa74 	bl	8000c60 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277c:	f7fe fa70 	bl	8000c60 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e193      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d036      	beq.n	8002814 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d016      	beq.n	80027dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_RCC_OscConfig+0x27c>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe fa54 	bl	8000c60 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027bc:	f7fe fa50 	bl	8000c60 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e173      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_OscConfig+0x274>)
 80027d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x234>
 80027da:	e01b      	b.n	8002814 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_OscConfig+0x27c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e2:	f7fe fa3d 	bl	8000c60 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e8:	e00e      	b.n	8002808 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ea:	f7fe fa39 	bl	8000c60 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d907      	bls.n	8002808 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e15c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
 80027fc:	40023800 	.word	0x40023800
 8002800:	42470000 	.word	0x42470000
 8002804:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 800280a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ea      	bne.n	80027ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8097 	beq.w	8002950 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002826:	4b83      	ldr	r3, [pc, #524]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10f      	bne.n	8002852 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	4b7f      	ldr	r3, [pc, #508]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a7e      	ldr	r2, [pc, #504]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 800283c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b7c      	ldr	r3, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002852:	4b79      	ldr	r3, [pc, #484]	; (8002a38 <HAL_RCC_OscConfig+0x4b0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d118      	bne.n	8002890 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_OscConfig+0x4b0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a75      	ldr	r2, [pc, #468]	; (8002a38 <HAL_RCC_OscConfig+0x4b0>)
 8002864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800286a:	f7fe f9f9 	bl	8000c60 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002872:	f7fe f9f5 	bl	8000c60 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e118      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x4b0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d106      	bne.n	80028a6 <HAL_RCC_OscConfig+0x31e>
 8002898:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a65      	ldr	r2, [pc, #404]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
 80028a4:	e01c      	b.n	80028e0 <HAL_RCC_OscConfig+0x358>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x340>
 80028ae:	4b61      	ldr	r3, [pc, #388]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b2:	4a60      	ldr	r2, [pc, #384]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ba:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a5d      	ldr	r2, [pc, #372]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0x358>
 80028c8:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	4a59      	ldr	r2, [pc, #356]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	6713      	str	r3, [r2, #112]	; 0x70
 80028d4:	4b57      	ldr	r3, [pc, #348]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a56      	ldr	r2, [pc, #344]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80028da:	f023 0304 	bic.w	r3, r3, #4
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d015      	beq.n	8002914 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe f9ba 	bl	8000c60 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe f9b6 	bl	8000c60 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0d7      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002906:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0ee      	beq.n	80028f0 <HAL_RCC_OscConfig+0x368>
 8002912:	e014      	b.n	800293e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe f9a4 	bl	8000c60 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800291a:	e00a      	b.n	8002932 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291c:	f7fe f9a0 	bl	8000c60 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0c1      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002932:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1ee      	bne.n	800291c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002944:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002948:	4a3a      	ldr	r2, [pc, #232]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 800294a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80ad 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800295a:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b08      	cmp	r3, #8
 8002964:	d060      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d145      	bne.n	80029fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b33      	ldr	r3, [pc, #204]	; (8002a3c <HAL_RCC_OscConfig+0x4b4>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002974:	f7fe f974 	bl	8000c60 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe f970 	bl	8000c60 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e093      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69da      	ldr	r2, [r3, #28]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	3b01      	subs	r3, #1
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	071b      	lsls	r3, r3, #28
 80029c6:	491b      	ldr	r1, [pc, #108]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029cc:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x4b4>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fe f945 	bl	8000c60 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe f941 	bl	8000c60 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e064      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x452>
 80029f8:	e05c      	b.n	8002ab4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <HAL_RCC_OscConfig+0x4b4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe f92e 	bl	8000c60 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a08:	f7fe f92a 	bl	8000c60 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e04d      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_OscConfig+0x4ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x480>
 8002a26:	e045      	b.n	8002ab4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e040      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000
 8002a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a40:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_RCC_OscConfig+0x538>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d030      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d129      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d122      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d119      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d10f      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <std>:
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	b510      	push	{r4, lr}
 8002ac8:	4604      	mov	r4, r0
 8002aca:	e9c0 3300 	strd	r3, r3, [r0]
 8002ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ad2:	6083      	str	r3, [r0, #8]
 8002ad4:	8181      	strh	r1, [r0, #12]
 8002ad6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ad8:	81c2      	strh	r2, [r0, #14]
 8002ada:	6183      	str	r3, [r0, #24]
 8002adc:	4619      	mov	r1, r3
 8002ade:	2208      	movs	r2, #8
 8002ae0:	305c      	adds	r0, #92	; 0x5c
 8002ae2:	f000 f8b1 	bl	8002c48 <memset>
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <std+0x38>)
 8002ae8:	6263      	str	r3, [r4, #36]	; 0x24
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <std+0x3c>)
 8002aec:	62a3      	str	r3, [r4, #40]	; 0x28
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <std+0x40>)
 8002af0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <std+0x44>)
 8002af4:	6224      	str	r4, [r4, #32]
 8002af6:	6323      	str	r3, [r4, #48]	; 0x30
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	bf00      	nop
 8002afc:	0800350d 	.word	0x0800350d
 8002b00:	0800352f 	.word	0x0800352f
 8002b04:	08003567 	.word	0x08003567
 8002b08:	0800358b 	.word	0x0800358b

08002b0c <stdio_exit_handler>:
 8002b0c:	4a02      	ldr	r2, [pc, #8]	; (8002b18 <stdio_exit_handler+0xc>)
 8002b0e:	4903      	ldr	r1, [pc, #12]	; (8002b1c <stdio_exit_handler+0x10>)
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <stdio_exit_handler+0x14>)
 8002b12:	f000 b869 	b.w	8002be8 <_fwalk_sglue>
 8002b16:	bf00      	nop
 8002b18:	2000000c 	.word	0x2000000c
 8002b1c:	080034a5 	.word	0x080034a5
 8002b20:	20000018 	.word	0x20000018

08002b24 <cleanup_stdio>:
 8002b24:	6841      	ldr	r1, [r0, #4]
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <cleanup_stdio+0x34>)
 8002b28:	4299      	cmp	r1, r3
 8002b2a:	b510      	push	{r4, lr}
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	d001      	beq.n	8002b34 <cleanup_stdio+0x10>
 8002b30:	f000 fcb8 	bl	80034a4 <_fflush_r>
 8002b34:	68a1      	ldr	r1, [r4, #8]
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <cleanup_stdio+0x38>)
 8002b38:	4299      	cmp	r1, r3
 8002b3a:	d002      	beq.n	8002b42 <cleanup_stdio+0x1e>
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f000 fcb1 	bl	80034a4 <_fflush_r>
 8002b42:	68e1      	ldr	r1, [r4, #12]
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <cleanup_stdio+0x3c>)
 8002b46:	4299      	cmp	r1, r3
 8002b48:	d004      	beq.n	8002b54 <cleanup_stdio+0x30>
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b50:	f000 bca8 	b.w	80034a4 <_fflush_r>
 8002b54:	bd10      	pop	{r4, pc}
 8002b56:	bf00      	nop
 8002b58:	20000114 	.word	0x20000114
 8002b5c:	2000017c 	.word	0x2000017c
 8002b60:	200001e4 	.word	0x200001e4

08002b64 <global_stdio_init.part.0>:
 8002b64:	b510      	push	{r4, lr}
 8002b66:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <global_stdio_init.part.0+0x30>)
 8002b68:	4c0b      	ldr	r4, [pc, #44]	; (8002b98 <global_stdio_init.part.0+0x34>)
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <global_stdio_init.part.0+0x38>)
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	4620      	mov	r0, r4
 8002b70:	2200      	movs	r2, #0
 8002b72:	2104      	movs	r1, #4
 8002b74:	f7ff ffa6 	bl	8002ac4 <std>
 8002b78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	2109      	movs	r1, #9
 8002b80:	f7ff ffa0 	bl	8002ac4 <std>
 8002b84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b88:	2202      	movs	r2, #2
 8002b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b8e:	2112      	movs	r1, #18
 8002b90:	f7ff bf98 	b.w	8002ac4 <std>
 8002b94:	2000024c 	.word	0x2000024c
 8002b98:	20000114 	.word	0x20000114
 8002b9c:	08002b0d 	.word	0x08002b0d

08002ba0 <__sfp_lock_acquire>:
 8002ba0:	4801      	ldr	r0, [pc, #4]	; (8002ba8 <__sfp_lock_acquire+0x8>)
 8002ba2:	f000 b883 	b.w	8002cac <__retarget_lock_acquire_recursive>
 8002ba6:	bf00      	nop
 8002ba8:	20000251 	.word	0x20000251

08002bac <__sfp_lock_release>:
 8002bac:	4801      	ldr	r0, [pc, #4]	; (8002bb4 <__sfp_lock_release+0x8>)
 8002bae:	f000 b87e 	b.w	8002cae <__retarget_lock_release_recursive>
 8002bb2:	bf00      	nop
 8002bb4:	20000251 	.word	0x20000251

08002bb8 <__sinit>:
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	4604      	mov	r4, r0
 8002bbc:	f7ff fff0 	bl	8002ba0 <__sfp_lock_acquire>
 8002bc0:	6a23      	ldr	r3, [r4, #32]
 8002bc2:	b11b      	cbz	r3, 8002bcc <__sinit+0x14>
 8002bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bc8:	f7ff bff0 	b.w	8002bac <__sfp_lock_release>
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <__sinit+0x28>)
 8002bce:	6223      	str	r3, [r4, #32]
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <__sinit+0x2c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f5      	bne.n	8002bc4 <__sinit+0xc>
 8002bd8:	f7ff ffc4 	bl	8002b64 <global_stdio_init.part.0>
 8002bdc:	e7f2      	b.n	8002bc4 <__sinit+0xc>
 8002bde:	bf00      	nop
 8002be0:	08002b25 	.word	0x08002b25
 8002be4:	2000024c 	.word	0x2000024c

08002be8 <_fwalk_sglue>:
 8002be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bec:	4607      	mov	r7, r0
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	2600      	movs	r6, #0
 8002bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8002bfc:	d505      	bpl.n	8002c0a <_fwalk_sglue+0x22>
 8002bfe:	6824      	ldr	r4, [r4, #0]
 8002c00:	2c00      	cmp	r4, #0
 8002c02:	d1f7      	bne.n	8002bf4 <_fwalk_sglue+0xc>
 8002c04:	4630      	mov	r0, r6
 8002c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c0a:	89ab      	ldrh	r3, [r5, #12]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d907      	bls.n	8002c20 <_fwalk_sglue+0x38>
 8002c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c14:	3301      	adds	r3, #1
 8002c16:	d003      	beq.n	8002c20 <_fwalk_sglue+0x38>
 8002c18:	4629      	mov	r1, r5
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	47c0      	blx	r8
 8002c1e:	4306      	orrs	r6, r0
 8002c20:	3568      	adds	r5, #104	; 0x68
 8002c22:	e7e9      	b.n	8002bf8 <_fwalk_sglue+0x10>

08002c24 <iprintf>:
 8002c24:	b40f      	push	{r0, r1, r2, r3}
 8002c26:	b507      	push	{r0, r1, r2, lr}
 8002c28:	4906      	ldr	r1, [pc, #24]	; (8002c44 <iprintf+0x20>)
 8002c2a:	ab04      	add	r3, sp, #16
 8002c2c:	6808      	ldr	r0, [r1, #0]
 8002c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c32:	6881      	ldr	r1, [r0, #8]
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	f000 f865 	bl	8002d04 <_vfiprintf_r>
 8002c3a:	b003      	add	sp, #12
 8002c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c40:	b004      	add	sp, #16
 8002c42:	4770      	bx	lr
 8002c44:	20000064 	.word	0x20000064

08002c48 <memset>:
 8002c48:	4402      	add	r2, r0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <memset+0xa>
 8002c50:	4770      	bx	lr
 8002c52:	f803 1b01 	strb.w	r1, [r3], #1
 8002c56:	e7f9      	b.n	8002c4c <memset+0x4>

08002c58 <__errno>:
 8002c58:	4b01      	ldr	r3, [pc, #4]	; (8002c60 <__errno+0x8>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000064 	.word	0x20000064

08002c64 <__libc_init_array>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	4d0d      	ldr	r5, [pc, #52]	; (8002c9c <__libc_init_array+0x38>)
 8002c68:	4c0d      	ldr	r4, [pc, #52]	; (8002ca0 <__libc_init_array+0x3c>)
 8002c6a:	1b64      	subs	r4, r4, r5
 8002c6c:	10a4      	asrs	r4, r4, #2
 8002c6e:	2600      	movs	r6, #0
 8002c70:	42a6      	cmp	r6, r4
 8002c72:	d109      	bne.n	8002c88 <__libc_init_array+0x24>
 8002c74:	4d0b      	ldr	r5, [pc, #44]	; (8002ca4 <__libc_init_array+0x40>)
 8002c76:	4c0c      	ldr	r4, [pc, #48]	; (8002ca8 <__libc_init_array+0x44>)
 8002c78:	f000 fe46 	bl	8003908 <_init>
 8002c7c:	1b64      	subs	r4, r4, r5
 8002c7e:	10a4      	asrs	r4, r4, #2
 8002c80:	2600      	movs	r6, #0
 8002c82:	42a6      	cmp	r6, r4
 8002c84:	d105      	bne.n	8002c92 <__libc_init_array+0x2e>
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c8c:	4798      	blx	r3
 8002c8e:	3601      	adds	r6, #1
 8002c90:	e7ee      	b.n	8002c70 <__libc_init_array+0xc>
 8002c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c96:	4798      	blx	r3
 8002c98:	3601      	adds	r6, #1
 8002c9a:	e7f2      	b.n	8002c82 <__libc_init_array+0x1e>
 8002c9c:	08003998 	.word	0x08003998
 8002ca0:	08003998 	.word	0x08003998
 8002ca4:	08003998 	.word	0x08003998
 8002ca8:	0800399c 	.word	0x0800399c

08002cac <__retarget_lock_acquire_recursive>:
 8002cac:	4770      	bx	lr

08002cae <__retarget_lock_release_recursive>:
 8002cae:	4770      	bx	lr

08002cb0 <__sfputc_r>:
 8002cb0:	6893      	ldr	r3, [r2, #8]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	b410      	push	{r4}
 8002cb8:	6093      	str	r3, [r2, #8]
 8002cba:	da08      	bge.n	8002cce <__sfputc_r+0x1e>
 8002cbc:	6994      	ldr	r4, [r2, #24]
 8002cbe:	42a3      	cmp	r3, r4
 8002cc0:	db01      	blt.n	8002cc6 <__sfputc_r+0x16>
 8002cc2:	290a      	cmp	r1, #10
 8002cc4:	d103      	bne.n	8002cce <__sfputc_r+0x1e>
 8002cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cca:	f000 bc62 	b.w	8003592 <__swbuf_r>
 8002cce:	6813      	ldr	r3, [r2, #0]
 8002cd0:	1c58      	adds	r0, r3, #1
 8002cd2:	6010      	str	r0, [r2, #0]
 8002cd4:	7019      	strb	r1, [r3, #0]
 8002cd6:	4608      	mov	r0, r1
 8002cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <__sfputs_r>:
 8002cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce0:	4606      	mov	r6, r0
 8002ce2:	460f      	mov	r7, r1
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	18d5      	adds	r5, r2, r3
 8002ce8:	42ac      	cmp	r4, r5
 8002cea:	d101      	bne.n	8002cf0 <__sfputs_r+0x12>
 8002cec:	2000      	movs	r0, #0
 8002cee:	e007      	b.n	8002d00 <__sfputs_r+0x22>
 8002cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf4:	463a      	mov	r2, r7
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f7ff ffda 	bl	8002cb0 <__sfputc_r>
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	d1f3      	bne.n	8002ce8 <__sfputs_r+0xa>
 8002d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d04 <_vfiprintf_r>:
 8002d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d08:	460d      	mov	r5, r1
 8002d0a:	b09d      	sub	sp, #116	; 0x74
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	4698      	mov	r8, r3
 8002d10:	4606      	mov	r6, r0
 8002d12:	b118      	cbz	r0, 8002d1c <_vfiprintf_r+0x18>
 8002d14:	6a03      	ldr	r3, [r0, #32]
 8002d16:	b90b      	cbnz	r3, 8002d1c <_vfiprintf_r+0x18>
 8002d18:	f7ff ff4e 	bl	8002bb8 <__sinit>
 8002d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d1e:	07d9      	lsls	r1, r3, #31
 8002d20:	d405      	bmi.n	8002d2e <_vfiprintf_r+0x2a>
 8002d22:	89ab      	ldrh	r3, [r5, #12]
 8002d24:	059a      	lsls	r2, r3, #22
 8002d26:	d402      	bmi.n	8002d2e <_vfiprintf_r+0x2a>
 8002d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d2a:	f7ff ffbf 	bl	8002cac <__retarget_lock_acquire_recursive>
 8002d2e:	89ab      	ldrh	r3, [r5, #12]
 8002d30:	071b      	lsls	r3, r3, #28
 8002d32:	d501      	bpl.n	8002d38 <_vfiprintf_r+0x34>
 8002d34:	692b      	ldr	r3, [r5, #16]
 8002d36:	b99b      	cbnz	r3, 8002d60 <_vfiprintf_r+0x5c>
 8002d38:	4629      	mov	r1, r5
 8002d3a:	4630      	mov	r0, r6
 8002d3c:	f000 fc66 	bl	800360c <__swsetup_r>
 8002d40:	b170      	cbz	r0, 8002d60 <_vfiprintf_r+0x5c>
 8002d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d44:	07dc      	lsls	r4, r3, #31
 8002d46:	d504      	bpl.n	8002d52 <_vfiprintf_r+0x4e>
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d4c:	b01d      	add	sp, #116	; 0x74
 8002d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d52:	89ab      	ldrh	r3, [r5, #12]
 8002d54:	0598      	lsls	r0, r3, #22
 8002d56:	d4f7      	bmi.n	8002d48 <_vfiprintf_r+0x44>
 8002d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d5a:	f7ff ffa8 	bl	8002cae <__retarget_lock_release_recursive>
 8002d5e:	e7f3      	b.n	8002d48 <_vfiprintf_r+0x44>
 8002d60:	2300      	movs	r3, #0
 8002d62:	9309      	str	r3, [sp, #36]	; 0x24
 8002d64:	2320      	movs	r3, #32
 8002d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d6e:	2330      	movs	r3, #48	; 0x30
 8002d70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002f24 <_vfiprintf_r+0x220>
 8002d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d78:	f04f 0901 	mov.w	r9, #1
 8002d7c:	4623      	mov	r3, r4
 8002d7e:	469a      	mov	sl, r3
 8002d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d84:	b10a      	cbz	r2, 8002d8a <_vfiprintf_r+0x86>
 8002d86:	2a25      	cmp	r2, #37	; 0x25
 8002d88:	d1f9      	bne.n	8002d7e <_vfiprintf_r+0x7a>
 8002d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8002d8e:	d00b      	beq.n	8002da8 <_vfiprintf_r+0xa4>
 8002d90:	465b      	mov	r3, fp
 8002d92:	4622      	mov	r2, r4
 8002d94:	4629      	mov	r1, r5
 8002d96:	4630      	mov	r0, r6
 8002d98:	f7ff ffa1 	bl	8002cde <__sfputs_r>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	f000 80a9 	beq.w	8002ef4 <_vfiprintf_r+0x1f0>
 8002da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002da4:	445a      	add	r2, fp
 8002da6:	9209      	str	r2, [sp, #36]	; 0x24
 8002da8:	f89a 3000 	ldrb.w	r3, [sl]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a1 	beq.w	8002ef4 <_vfiprintf_r+0x1f0>
 8002db2:	2300      	movs	r3, #0
 8002db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dbc:	f10a 0a01 	add.w	sl, sl, #1
 8002dc0:	9304      	str	r3, [sp, #16]
 8002dc2:	9307      	str	r3, [sp, #28]
 8002dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8002dca:	4654      	mov	r4, sl
 8002dcc:	2205      	movs	r2, #5
 8002dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd2:	4854      	ldr	r0, [pc, #336]	; (8002f24 <_vfiprintf_r+0x220>)
 8002dd4:	f7fd fa1c 	bl	8000210 <memchr>
 8002dd8:	9a04      	ldr	r2, [sp, #16]
 8002dda:	b9d8      	cbnz	r0, 8002e14 <_vfiprintf_r+0x110>
 8002ddc:	06d1      	lsls	r1, r2, #27
 8002dde:	bf44      	itt	mi
 8002de0:	2320      	movmi	r3, #32
 8002de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002de6:	0713      	lsls	r3, r2, #28
 8002de8:	bf44      	itt	mi
 8002dea:	232b      	movmi	r3, #43	; 0x2b
 8002dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002df0:	f89a 3000 	ldrb.w	r3, [sl]
 8002df4:	2b2a      	cmp	r3, #42	; 0x2a
 8002df6:	d015      	beq.n	8002e24 <_vfiprintf_r+0x120>
 8002df8:	9a07      	ldr	r2, [sp, #28]
 8002dfa:	4654      	mov	r4, sl
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f04f 0c0a 	mov.w	ip, #10
 8002e02:	4621      	mov	r1, r4
 8002e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e08:	3b30      	subs	r3, #48	; 0x30
 8002e0a:	2b09      	cmp	r3, #9
 8002e0c:	d94d      	bls.n	8002eaa <_vfiprintf_r+0x1a6>
 8002e0e:	b1b0      	cbz	r0, 8002e3e <_vfiprintf_r+0x13a>
 8002e10:	9207      	str	r2, [sp, #28]
 8002e12:	e014      	b.n	8002e3e <_vfiprintf_r+0x13a>
 8002e14:	eba0 0308 	sub.w	r3, r0, r8
 8002e18:	fa09 f303 	lsl.w	r3, r9, r3
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	9304      	str	r3, [sp, #16]
 8002e20:	46a2      	mov	sl, r4
 8002e22:	e7d2      	b.n	8002dca <_vfiprintf_r+0xc6>
 8002e24:	9b03      	ldr	r3, [sp, #12]
 8002e26:	1d19      	adds	r1, r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	9103      	str	r1, [sp, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bfbb      	ittet	lt
 8002e30:	425b      	neglt	r3, r3
 8002e32:	f042 0202 	orrlt.w	r2, r2, #2
 8002e36:	9307      	strge	r3, [sp, #28]
 8002e38:	9307      	strlt	r3, [sp, #28]
 8002e3a:	bfb8      	it	lt
 8002e3c:	9204      	strlt	r2, [sp, #16]
 8002e3e:	7823      	ldrb	r3, [r4, #0]
 8002e40:	2b2e      	cmp	r3, #46	; 0x2e
 8002e42:	d10c      	bne.n	8002e5e <_vfiprintf_r+0x15a>
 8002e44:	7863      	ldrb	r3, [r4, #1]
 8002e46:	2b2a      	cmp	r3, #42	; 0x2a
 8002e48:	d134      	bne.n	8002eb4 <_vfiprintf_r+0x1b0>
 8002e4a:	9b03      	ldr	r3, [sp, #12]
 8002e4c:	1d1a      	adds	r2, r3, #4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	9203      	str	r2, [sp, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bfb8      	it	lt
 8002e56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e5a:	3402      	adds	r4, #2
 8002e5c:	9305      	str	r3, [sp, #20]
 8002e5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002f34 <_vfiprintf_r+0x230>
 8002e62:	7821      	ldrb	r1, [r4, #0]
 8002e64:	2203      	movs	r2, #3
 8002e66:	4650      	mov	r0, sl
 8002e68:	f7fd f9d2 	bl	8000210 <memchr>
 8002e6c:	b138      	cbz	r0, 8002e7e <_vfiprintf_r+0x17a>
 8002e6e:	9b04      	ldr	r3, [sp, #16]
 8002e70:	eba0 000a 	sub.w	r0, r0, sl
 8002e74:	2240      	movs	r2, #64	; 0x40
 8002e76:	4082      	lsls	r2, r0
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	3401      	adds	r4, #1
 8002e7c:	9304      	str	r3, [sp, #16]
 8002e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e82:	4829      	ldr	r0, [pc, #164]	; (8002f28 <_vfiprintf_r+0x224>)
 8002e84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e88:	2206      	movs	r2, #6
 8002e8a:	f7fd f9c1 	bl	8000210 <memchr>
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	d03f      	beq.n	8002f12 <_vfiprintf_r+0x20e>
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <_vfiprintf_r+0x228>)
 8002e94:	bb1b      	cbnz	r3, 8002ede <_vfiprintf_r+0x1da>
 8002e96:	9b03      	ldr	r3, [sp, #12]
 8002e98:	3307      	adds	r3, #7
 8002e9a:	f023 0307 	bic.w	r3, r3, #7
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	9303      	str	r3, [sp, #12]
 8002ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea4:	443b      	add	r3, r7
 8002ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ea8:	e768      	b.n	8002d7c <_vfiprintf_r+0x78>
 8002eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eae:	460c      	mov	r4, r1
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	e7a6      	b.n	8002e02 <_vfiprintf_r+0xfe>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	3401      	adds	r4, #1
 8002eb8:	9305      	str	r3, [sp, #20]
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f04f 0c0a 	mov.w	ip, #10
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ec6:	3a30      	subs	r2, #48	; 0x30
 8002ec8:	2a09      	cmp	r2, #9
 8002eca:	d903      	bls.n	8002ed4 <_vfiprintf_r+0x1d0>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0c6      	beq.n	8002e5e <_vfiprintf_r+0x15a>
 8002ed0:	9105      	str	r1, [sp, #20]
 8002ed2:	e7c4      	b.n	8002e5e <_vfiprintf_r+0x15a>
 8002ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ed8:	4604      	mov	r4, r0
 8002eda:	2301      	movs	r3, #1
 8002edc:	e7f0      	b.n	8002ec0 <_vfiprintf_r+0x1bc>
 8002ede:	ab03      	add	r3, sp, #12
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	462a      	mov	r2, r5
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <_vfiprintf_r+0x22c>)
 8002ee6:	a904      	add	r1, sp, #16
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f3af 8000 	nop.w
 8002eee:	4607      	mov	r7, r0
 8002ef0:	1c78      	adds	r0, r7, #1
 8002ef2:	d1d6      	bne.n	8002ea2 <_vfiprintf_r+0x19e>
 8002ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ef6:	07d9      	lsls	r1, r3, #31
 8002ef8:	d405      	bmi.n	8002f06 <_vfiprintf_r+0x202>
 8002efa:	89ab      	ldrh	r3, [r5, #12]
 8002efc:	059a      	lsls	r2, r3, #22
 8002efe:	d402      	bmi.n	8002f06 <_vfiprintf_r+0x202>
 8002f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f02:	f7ff fed4 	bl	8002cae <__retarget_lock_release_recursive>
 8002f06:	89ab      	ldrh	r3, [r5, #12]
 8002f08:	065b      	lsls	r3, r3, #25
 8002f0a:	f53f af1d 	bmi.w	8002d48 <_vfiprintf_r+0x44>
 8002f0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f10:	e71c      	b.n	8002d4c <_vfiprintf_r+0x48>
 8002f12:	ab03      	add	r3, sp, #12
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	462a      	mov	r2, r5
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <_vfiprintf_r+0x22c>)
 8002f1a:	a904      	add	r1, sp, #16
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	f000 f919 	bl	8003154 <_printf_i>
 8002f22:	e7e4      	b.n	8002eee <_vfiprintf_r+0x1ea>
 8002f24:	0800395c 	.word	0x0800395c
 8002f28:	08003966 	.word	0x08003966
 8002f2c:	00000000 	.word	0x00000000
 8002f30:	08002cdf 	.word	0x08002cdf
 8002f34:	08003962 	.word	0x08003962

08002f38 <sbrk_aligned>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	4e0e      	ldr	r6, [pc, #56]	; (8002f74 <sbrk_aligned+0x3c>)
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	6831      	ldr	r1, [r6, #0]
 8002f40:	4605      	mov	r5, r0
 8002f42:	b911      	cbnz	r1, 8002f4a <sbrk_aligned+0x12>
 8002f44:	f000 fc72 	bl	800382c <_sbrk_r>
 8002f48:	6030      	str	r0, [r6, #0]
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f000 fc6d 	bl	800382c <_sbrk_r>
 8002f52:	1c43      	adds	r3, r0, #1
 8002f54:	d00a      	beq.n	8002f6c <sbrk_aligned+0x34>
 8002f56:	1cc4      	adds	r4, r0, #3
 8002f58:	f024 0403 	bic.w	r4, r4, #3
 8002f5c:	42a0      	cmp	r0, r4
 8002f5e:	d007      	beq.n	8002f70 <sbrk_aligned+0x38>
 8002f60:	1a21      	subs	r1, r4, r0
 8002f62:	4628      	mov	r0, r5
 8002f64:	f000 fc62 	bl	800382c <_sbrk_r>
 8002f68:	3001      	adds	r0, #1
 8002f6a:	d101      	bne.n	8002f70 <sbrk_aligned+0x38>
 8002f6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002f70:	4620      	mov	r0, r4
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	20000258 	.word	0x20000258

08002f78 <_malloc_r>:
 8002f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f7c:	1ccd      	adds	r5, r1, #3
 8002f7e:	f025 0503 	bic.w	r5, r5, #3
 8002f82:	3508      	adds	r5, #8
 8002f84:	2d0c      	cmp	r5, #12
 8002f86:	bf38      	it	cc
 8002f88:	250c      	movcc	r5, #12
 8002f8a:	2d00      	cmp	r5, #0
 8002f8c:	4607      	mov	r7, r0
 8002f8e:	db01      	blt.n	8002f94 <_malloc_r+0x1c>
 8002f90:	42a9      	cmp	r1, r5
 8002f92:	d905      	bls.n	8002fa0 <_malloc_r+0x28>
 8002f94:	230c      	movs	r3, #12
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	2600      	movs	r6, #0
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003074 <_malloc_r+0xfc>
 8002fa4:	f000 faa6 	bl	80034f4 <__malloc_lock>
 8002fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8002fac:	461c      	mov	r4, r3
 8002fae:	bb5c      	cbnz	r4, 8003008 <_malloc_r+0x90>
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f7ff ffc0 	bl	8002f38 <sbrk_aligned>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	4604      	mov	r4, r0
 8002fbc:	d155      	bne.n	800306a <_malloc_r+0xf2>
 8002fbe:	f8d8 4000 	ldr.w	r4, [r8]
 8002fc2:	4626      	mov	r6, r4
 8002fc4:	2e00      	cmp	r6, #0
 8002fc6:	d145      	bne.n	8003054 <_malloc_r+0xdc>
 8002fc8:	2c00      	cmp	r4, #0
 8002fca:	d048      	beq.n	800305e <_malloc_r+0xe6>
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	4631      	mov	r1, r6
 8002fd0:	4638      	mov	r0, r7
 8002fd2:	eb04 0903 	add.w	r9, r4, r3
 8002fd6:	f000 fc29 	bl	800382c <_sbrk_r>
 8002fda:	4581      	cmp	r9, r0
 8002fdc:	d13f      	bne.n	800305e <_malloc_r+0xe6>
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	1a6d      	subs	r5, r5, r1
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	f7ff ffa7 	bl	8002f38 <sbrk_aligned>
 8002fea:	3001      	adds	r0, #1
 8002fec:	d037      	beq.n	800305e <_malloc_r+0xe6>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	442b      	add	r3, r5
 8002ff2:	6023      	str	r3, [r4, #0]
 8002ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d038      	beq.n	800306e <_malloc_r+0xf6>
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	42a2      	cmp	r2, r4
 8003000:	d12b      	bne.n	800305a <_malloc_r+0xe2>
 8003002:	2200      	movs	r2, #0
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	e00f      	b.n	8003028 <_malloc_r+0xb0>
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	1b52      	subs	r2, r2, r5
 800300c:	d41f      	bmi.n	800304e <_malloc_r+0xd6>
 800300e:	2a0b      	cmp	r2, #11
 8003010:	d917      	bls.n	8003042 <_malloc_r+0xca>
 8003012:	1961      	adds	r1, r4, r5
 8003014:	42a3      	cmp	r3, r4
 8003016:	6025      	str	r5, [r4, #0]
 8003018:	bf18      	it	ne
 800301a:	6059      	strne	r1, [r3, #4]
 800301c:	6863      	ldr	r3, [r4, #4]
 800301e:	bf08      	it	eq
 8003020:	f8c8 1000 	streq.w	r1, [r8]
 8003024:	5162      	str	r2, [r4, r5]
 8003026:	604b      	str	r3, [r1, #4]
 8003028:	4638      	mov	r0, r7
 800302a:	f104 060b 	add.w	r6, r4, #11
 800302e:	f000 fa67 	bl	8003500 <__malloc_unlock>
 8003032:	f026 0607 	bic.w	r6, r6, #7
 8003036:	1d23      	adds	r3, r4, #4
 8003038:	1af2      	subs	r2, r6, r3
 800303a:	d0ae      	beq.n	8002f9a <_malloc_r+0x22>
 800303c:	1b9b      	subs	r3, r3, r6
 800303e:	50a3      	str	r3, [r4, r2]
 8003040:	e7ab      	b.n	8002f9a <_malloc_r+0x22>
 8003042:	42a3      	cmp	r3, r4
 8003044:	6862      	ldr	r2, [r4, #4]
 8003046:	d1dd      	bne.n	8003004 <_malloc_r+0x8c>
 8003048:	f8c8 2000 	str.w	r2, [r8]
 800304c:	e7ec      	b.n	8003028 <_malloc_r+0xb0>
 800304e:	4623      	mov	r3, r4
 8003050:	6864      	ldr	r4, [r4, #4]
 8003052:	e7ac      	b.n	8002fae <_malloc_r+0x36>
 8003054:	4634      	mov	r4, r6
 8003056:	6876      	ldr	r6, [r6, #4]
 8003058:	e7b4      	b.n	8002fc4 <_malloc_r+0x4c>
 800305a:	4613      	mov	r3, r2
 800305c:	e7cc      	b.n	8002ff8 <_malloc_r+0x80>
 800305e:	230c      	movs	r3, #12
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4638      	mov	r0, r7
 8003064:	f000 fa4c 	bl	8003500 <__malloc_unlock>
 8003068:	e797      	b.n	8002f9a <_malloc_r+0x22>
 800306a:	6025      	str	r5, [r4, #0]
 800306c:	e7dc      	b.n	8003028 <_malloc_r+0xb0>
 800306e:	605b      	str	r3, [r3, #4]
 8003070:	deff      	udf	#255	; 0xff
 8003072:	bf00      	nop
 8003074:	20000254 	.word	0x20000254

08003078 <_printf_common>:
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	4616      	mov	r6, r2
 800307e:	4699      	mov	r9, r3
 8003080:	688a      	ldr	r2, [r1, #8]
 8003082:	690b      	ldr	r3, [r1, #16]
 8003084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003088:	4293      	cmp	r3, r2
 800308a:	bfb8      	it	lt
 800308c:	4613      	movlt	r3, r2
 800308e:	6033      	str	r3, [r6, #0]
 8003090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003094:	4607      	mov	r7, r0
 8003096:	460c      	mov	r4, r1
 8003098:	b10a      	cbz	r2, 800309e <_printf_common+0x26>
 800309a:	3301      	adds	r3, #1
 800309c:	6033      	str	r3, [r6, #0]
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	0699      	lsls	r1, r3, #26
 80030a2:	bf42      	ittt	mi
 80030a4:	6833      	ldrmi	r3, [r6, #0]
 80030a6:	3302      	addmi	r3, #2
 80030a8:	6033      	strmi	r3, [r6, #0]
 80030aa:	6825      	ldr	r5, [r4, #0]
 80030ac:	f015 0506 	ands.w	r5, r5, #6
 80030b0:	d106      	bne.n	80030c0 <_printf_common+0x48>
 80030b2:	f104 0a19 	add.w	sl, r4, #25
 80030b6:	68e3      	ldr	r3, [r4, #12]
 80030b8:	6832      	ldr	r2, [r6, #0]
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	42ab      	cmp	r3, r5
 80030be:	dc26      	bgt.n	800310e <_printf_common+0x96>
 80030c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030c4:	1e13      	subs	r3, r2, #0
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	bf18      	it	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	0692      	lsls	r2, r2, #26
 80030ce:	d42b      	bmi.n	8003128 <_printf_common+0xb0>
 80030d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030d4:	4649      	mov	r1, r9
 80030d6:	4638      	mov	r0, r7
 80030d8:	47c0      	blx	r8
 80030da:	3001      	adds	r0, #1
 80030dc:	d01e      	beq.n	800311c <_printf_common+0xa4>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	6922      	ldr	r2, [r4, #16]
 80030e2:	f003 0306 	and.w	r3, r3, #6
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	bf02      	ittt	eq
 80030ea:	68e5      	ldreq	r5, [r4, #12]
 80030ec:	6833      	ldreq	r3, [r6, #0]
 80030ee:	1aed      	subeq	r5, r5, r3
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	bf0c      	ite	eq
 80030f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030f8:	2500      	movne	r5, #0
 80030fa:	4293      	cmp	r3, r2
 80030fc:	bfc4      	itt	gt
 80030fe:	1a9b      	subgt	r3, r3, r2
 8003100:	18ed      	addgt	r5, r5, r3
 8003102:	2600      	movs	r6, #0
 8003104:	341a      	adds	r4, #26
 8003106:	42b5      	cmp	r5, r6
 8003108:	d11a      	bne.n	8003140 <_printf_common+0xc8>
 800310a:	2000      	movs	r0, #0
 800310c:	e008      	b.n	8003120 <_printf_common+0xa8>
 800310e:	2301      	movs	r3, #1
 8003110:	4652      	mov	r2, sl
 8003112:	4649      	mov	r1, r9
 8003114:	4638      	mov	r0, r7
 8003116:	47c0      	blx	r8
 8003118:	3001      	adds	r0, #1
 800311a:	d103      	bne.n	8003124 <_printf_common+0xac>
 800311c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003124:	3501      	adds	r5, #1
 8003126:	e7c6      	b.n	80030b6 <_printf_common+0x3e>
 8003128:	18e1      	adds	r1, r4, r3
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	2030      	movs	r0, #48	; 0x30
 800312e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003132:	4422      	add	r2, r4
 8003134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800313c:	3302      	adds	r3, #2
 800313e:	e7c7      	b.n	80030d0 <_printf_common+0x58>
 8003140:	2301      	movs	r3, #1
 8003142:	4622      	mov	r2, r4
 8003144:	4649      	mov	r1, r9
 8003146:	4638      	mov	r0, r7
 8003148:	47c0      	blx	r8
 800314a:	3001      	adds	r0, #1
 800314c:	d0e6      	beq.n	800311c <_printf_common+0xa4>
 800314e:	3601      	adds	r6, #1
 8003150:	e7d9      	b.n	8003106 <_printf_common+0x8e>
	...

08003154 <_printf_i>:
 8003154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003158:	7e0f      	ldrb	r7, [r1, #24]
 800315a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800315c:	2f78      	cmp	r7, #120	; 0x78
 800315e:	4691      	mov	r9, r2
 8003160:	4680      	mov	r8, r0
 8003162:	460c      	mov	r4, r1
 8003164:	469a      	mov	sl, r3
 8003166:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800316a:	d807      	bhi.n	800317c <_printf_i+0x28>
 800316c:	2f62      	cmp	r7, #98	; 0x62
 800316e:	d80a      	bhi.n	8003186 <_printf_i+0x32>
 8003170:	2f00      	cmp	r7, #0
 8003172:	f000 80d4 	beq.w	800331e <_printf_i+0x1ca>
 8003176:	2f58      	cmp	r7, #88	; 0x58
 8003178:	f000 80c0 	beq.w	80032fc <_printf_i+0x1a8>
 800317c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003184:	e03a      	b.n	80031fc <_printf_i+0xa8>
 8003186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800318a:	2b15      	cmp	r3, #21
 800318c:	d8f6      	bhi.n	800317c <_printf_i+0x28>
 800318e:	a101      	add	r1, pc, #4	; (adr r1, 8003194 <_printf_i+0x40>)
 8003190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003194:	080031ed 	.word	0x080031ed
 8003198:	08003201 	.word	0x08003201
 800319c:	0800317d 	.word	0x0800317d
 80031a0:	0800317d 	.word	0x0800317d
 80031a4:	0800317d 	.word	0x0800317d
 80031a8:	0800317d 	.word	0x0800317d
 80031ac:	08003201 	.word	0x08003201
 80031b0:	0800317d 	.word	0x0800317d
 80031b4:	0800317d 	.word	0x0800317d
 80031b8:	0800317d 	.word	0x0800317d
 80031bc:	0800317d 	.word	0x0800317d
 80031c0:	08003305 	.word	0x08003305
 80031c4:	0800322d 	.word	0x0800322d
 80031c8:	080032bf 	.word	0x080032bf
 80031cc:	0800317d 	.word	0x0800317d
 80031d0:	0800317d 	.word	0x0800317d
 80031d4:	08003327 	.word	0x08003327
 80031d8:	0800317d 	.word	0x0800317d
 80031dc:	0800322d 	.word	0x0800322d
 80031e0:	0800317d 	.word	0x0800317d
 80031e4:	0800317d 	.word	0x0800317d
 80031e8:	080032c7 	.word	0x080032c7
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	1d1a      	adds	r2, r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	602a      	str	r2, [r5, #0]
 80031f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031fc:	2301      	movs	r3, #1
 80031fe:	e09f      	b.n	8003340 <_printf_i+0x1ec>
 8003200:	6820      	ldr	r0, [r4, #0]
 8003202:	682b      	ldr	r3, [r5, #0]
 8003204:	0607      	lsls	r7, r0, #24
 8003206:	f103 0104 	add.w	r1, r3, #4
 800320a:	6029      	str	r1, [r5, #0]
 800320c:	d501      	bpl.n	8003212 <_printf_i+0xbe>
 800320e:	681e      	ldr	r6, [r3, #0]
 8003210:	e003      	b.n	800321a <_printf_i+0xc6>
 8003212:	0646      	lsls	r6, r0, #25
 8003214:	d5fb      	bpl.n	800320e <_printf_i+0xba>
 8003216:	f9b3 6000 	ldrsh.w	r6, [r3]
 800321a:	2e00      	cmp	r6, #0
 800321c:	da03      	bge.n	8003226 <_printf_i+0xd2>
 800321e:	232d      	movs	r3, #45	; 0x2d
 8003220:	4276      	negs	r6, r6
 8003222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003226:	485a      	ldr	r0, [pc, #360]	; (8003390 <_printf_i+0x23c>)
 8003228:	230a      	movs	r3, #10
 800322a:	e012      	b.n	8003252 <_printf_i+0xfe>
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	6820      	ldr	r0, [r4, #0]
 8003230:	1d19      	adds	r1, r3, #4
 8003232:	6029      	str	r1, [r5, #0]
 8003234:	0605      	lsls	r5, r0, #24
 8003236:	d501      	bpl.n	800323c <_printf_i+0xe8>
 8003238:	681e      	ldr	r6, [r3, #0]
 800323a:	e002      	b.n	8003242 <_printf_i+0xee>
 800323c:	0641      	lsls	r1, r0, #25
 800323e:	d5fb      	bpl.n	8003238 <_printf_i+0xe4>
 8003240:	881e      	ldrh	r6, [r3, #0]
 8003242:	4853      	ldr	r0, [pc, #332]	; (8003390 <_printf_i+0x23c>)
 8003244:	2f6f      	cmp	r7, #111	; 0x6f
 8003246:	bf0c      	ite	eq
 8003248:	2308      	moveq	r3, #8
 800324a:	230a      	movne	r3, #10
 800324c:	2100      	movs	r1, #0
 800324e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003252:	6865      	ldr	r5, [r4, #4]
 8003254:	60a5      	str	r5, [r4, #8]
 8003256:	2d00      	cmp	r5, #0
 8003258:	bfa2      	ittt	ge
 800325a:	6821      	ldrge	r1, [r4, #0]
 800325c:	f021 0104 	bicge.w	r1, r1, #4
 8003260:	6021      	strge	r1, [r4, #0]
 8003262:	b90e      	cbnz	r6, 8003268 <_printf_i+0x114>
 8003264:	2d00      	cmp	r5, #0
 8003266:	d04b      	beq.n	8003300 <_printf_i+0x1ac>
 8003268:	4615      	mov	r5, r2
 800326a:	fbb6 f1f3 	udiv	r1, r6, r3
 800326e:	fb03 6711 	mls	r7, r3, r1, r6
 8003272:	5dc7      	ldrb	r7, [r0, r7]
 8003274:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003278:	4637      	mov	r7, r6
 800327a:	42bb      	cmp	r3, r7
 800327c:	460e      	mov	r6, r1
 800327e:	d9f4      	bls.n	800326a <_printf_i+0x116>
 8003280:	2b08      	cmp	r3, #8
 8003282:	d10b      	bne.n	800329c <_printf_i+0x148>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	07de      	lsls	r6, r3, #31
 8003288:	d508      	bpl.n	800329c <_printf_i+0x148>
 800328a:	6923      	ldr	r3, [r4, #16]
 800328c:	6861      	ldr	r1, [r4, #4]
 800328e:	4299      	cmp	r1, r3
 8003290:	bfde      	ittt	le
 8003292:	2330      	movle	r3, #48	; 0x30
 8003294:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003298:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800329c:	1b52      	subs	r2, r2, r5
 800329e:	6122      	str	r2, [r4, #16]
 80032a0:	f8cd a000 	str.w	sl, [sp]
 80032a4:	464b      	mov	r3, r9
 80032a6:	aa03      	add	r2, sp, #12
 80032a8:	4621      	mov	r1, r4
 80032aa:	4640      	mov	r0, r8
 80032ac:	f7ff fee4 	bl	8003078 <_printf_common>
 80032b0:	3001      	adds	r0, #1
 80032b2:	d14a      	bne.n	800334a <_printf_i+0x1f6>
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032b8:	b004      	add	sp, #16
 80032ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	f043 0320 	orr.w	r3, r3, #32
 80032c4:	6023      	str	r3, [r4, #0]
 80032c6:	4833      	ldr	r0, [pc, #204]	; (8003394 <_printf_i+0x240>)
 80032c8:	2778      	movs	r7, #120	; 0x78
 80032ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	6829      	ldr	r1, [r5, #0]
 80032d2:	061f      	lsls	r7, r3, #24
 80032d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80032d8:	d402      	bmi.n	80032e0 <_printf_i+0x18c>
 80032da:	065f      	lsls	r7, r3, #25
 80032dc:	bf48      	it	mi
 80032de:	b2b6      	uxthmi	r6, r6
 80032e0:	07df      	lsls	r7, r3, #31
 80032e2:	bf48      	it	mi
 80032e4:	f043 0320 	orrmi.w	r3, r3, #32
 80032e8:	6029      	str	r1, [r5, #0]
 80032ea:	bf48      	it	mi
 80032ec:	6023      	strmi	r3, [r4, #0]
 80032ee:	b91e      	cbnz	r6, 80032f8 <_printf_i+0x1a4>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	f023 0320 	bic.w	r3, r3, #32
 80032f6:	6023      	str	r3, [r4, #0]
 80032f8:	2310      	movs	r3, #16
 80032fa:	e7a7      	b.n	800324c <_printf_i+0xf8>
 80032fc:	4824      	ldr	r0, [pc, #144]	; (8003390 <_printf_i+0x23c>)
 80032fe:	e7e4      	b.n	80032ca <_printf_i+0x176>
 8003300:	4615      	mov	r5, r2
 8003302:	e7bd      	b.n	8003280 <_printf_i+0x12c>
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	6826      	ldr	r6, [r4, #0]
 8003308:	6961      	ldr	r1, [r4, #20]
 800330a:	1d18      	adds	r0, r3, #4
 800330c:	6028      	str	r0, [r5, #0]
 800330e:	0635      	lsls	r5, r6, #24
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	d501      	bpl.n	8003318 <_printf_i+0x1c4>
 8003314:	6019      	str	r1, [r3, #0]
 8003316:	e002      	b.n	800331e <_printf_i+0x1ca>
 8003318:	0670      	lsls	r0, r6, #25
 800331a:	d5fb      	bpl.n	8003314 <_printf_i+0x1c0>
 800331c:	8019      	strh	r1, [r3, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	6123      	str	r3, [r4, #16]
 8003322:	4615      	mov	r5, r2
 8003324:	e7bc      	b.n	80032a0 <_printf_i+0x14c>
 8003326:	682b      	ldr	r3, [r5, #0]
 8003328:	1d1a      	adds	r2, r3, #4
 800332a:	602a      	str	r2, [r5, #0]
 800332c:	681d      	ldr	r5, [r3, #0]
 800332e:	6862      	ldr	r2, [r4, #4]
 8003330:	2100      	movs	r1, #0
 8003332:	4628      	mov	r0, r5
 8003334:	f7fc ff6c 	bl	8000210 <memchr>
 8003338:	b108      	cbz	r0, 800333e <_printf_i+0x1ea>
 800333a:	1b40      	subs	r0, r0, r5
 800333c:	6060      	str	r0, [r4, #4]
 800333e:	6863      	ldr	r3, [r4, #4]
 8003340:	6123      	str	r3, [r4, #16]
 8003342:	2300      	movs	r3, #0
 8003344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003348:	e7aa      	b.n	80032a0 <_printf_i+0x14c>
 800334a:	6923      	ldr	r3, [r4, #16]
 800334c:	462a      	mov	r2, r5
 800334e:	4649      	mov	r1, r9
 8003350:	4640      	mov	r0, r8
 8003352:	47d0      	blx	sl
 8003354:	3001      	adds	r0, #1
 8003356:	d0ad      	beq.n	80032b4 <_printf_i+0x160>
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	079b      	lsls	r3, r3, #30
 800335c:	d413      	bmi.n	8003386 <_printf_i+0x232>
 800335e:	68e0      	ldr	r0, [r4, #12]
 8003360:	9b03      	ldr	r3, [sp, #12]
 8003362:	4298      	cmp	r0, r3
 8003364:	bfb8      	it	lt
 8003366:	4618      	movlt	r0, r3
 8003368:	e7a6      	b.n	80032b8 <_printf_i+0x164>
 800336a:	2301      	movs	r3, #1
 800336c:	4632      	mov	r2, r6
 800336e:	4649      	mov	r1, r9
 8003370:	4640      	mov	r0, r8
 8003372:	47d0      	blx	sl
 8003374:	3001      	adds	r0, #1
 8003376:	d09d      	beq.n	80032b4 <_printf_i+0x160>
 8003378:	3501      	adds	r5, #1
 800337a:	68e3      	ldr	r3, [r4, #12]
 800337c:	9903      	ldr	r1, [sp, #12]
 800337e:	1a5b      	subs	r3, r3, r1
 8003380:	42ab      	cmp	r3, r5
 8003382:	dcf2      	bgt.n	800336a <_printf_i+0x216>
 8003384:	e7eb      	b.n	800335e <_printf_i+0x20a>
 8003386:	2500      	movs	r5, #0
 8003388:	f104 0619 	add.w	r6, r4, #25
 800338c:	e7f5      	b.n	800337a <_printf_i+0x226>
 800338e:	bf00      	nop
 8003390:	0800396d 	.word	0x0800396d
 8003394:	0800397e 	.word	0x0800397e

08003398 <__sflush_r>:
 8003398:	898a      	ldrh	r2, [r1, #12]
 800339a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339e:	4605      	mov	r5, r0
 80033a0:	0710      	lsls	r0, r2, #28
 80033a2:	460c      	mov	r4, r1
 80033a4:	d458      	bmi.n	8003458 <__sflush_r+0xc0>
 80033a6:	684b      	ldr	r3, [r1, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	dc05      	bgt.n	80033b8 <__sflush_r+0x20>
 80033ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	dc02      	bgt.n	80033b8 <__sflush_r+0x20>
 80033b2:	2000      	movs	r0, #0
 80033b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ba:	2e00      	cmp	r6, #0
 80033bc:	d0f9      	beq.n	80033b2 <__sflush_r+0x1a>
 80033be:	2300      	movs	r3, #0
 80033c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033c4:	682f      	ldr	r7, [r5, #0]
 80033c6:	6a21      	ldr	r1, [r4, #32]
 80033c8:	602b      	str	r3, [r5, #0]
 80033ca:	d032      	beq.n	8003432 <__sflush_r+0x9a>
 80033cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	075a      	lsls	r2, r3, #29
 80033d2:	d505      	bpl.n	80033e0 <__sflush_r+0x48>
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	1ac0      	subs	r0, r0, r3
 80033d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033da:	b10b      	cbz	r3, 80033e0 <__sflush_r+0x48>
 80033dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033de:	1ac0      	subs	r0, r0, r3
 80033e0:	2300      	movs	r3, #0
 80033e2:	4602      	mov	r2, r0
 80033e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033e6:	6a21      	ldr	r1, [r4, #32]
 80033e8:	4628      	mov	r0, r5
 80033ea:	47b0      	blx	r6
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	d106      	bne.n	8003400 <__sflush_r+0x68>
 80033f2:	6829      	ldr	r1, [r5, #0]
 80033f4:	291d      	cmp	r1, #29
 80033f6:	d82b      	bhi.n	8003450 <__sflush_r+0xb8>
 80033f8:	4a29      	ldr	r2, [pc, #164]	; (80034a0 <__sflush_r+0x108>)
 80033fa:	410a      	asrs	r2, r1
 80033fc:	07d6      	lsls	r6, r2, #31
 80033fe:	d427      	bmi.n	8003450 <__sflush_r+0xb8>
 8003400:	2200      	movs	r2, #0
 8003402:	6062      	str	r2, [r4, #4]
 8003404:	04d9      	lsls	r1, r3, #19
 8003406:	6922      	ldr	r2, [r4, #16]
 8003408:	6022      	str	r2, [r4, #0]
 800340a:	d504      	bpl.n	8003416 <__sflush_r+0x7e>
 800340c:	1c42      	adds	r2, r0, #1
 800340e:	d101      	bne.n	8003414 <__sflush_r+0x7c>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	b903      	cbnz	r3, 8003416 <__sflush_r+0x7e>
 8003414:	6560      	str	r0, [r4, #84]	; 0x54
 8003416:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003418:	602f      	str	r7, [r5, #0]
 800341a:	2900      	cmp	r1, #0
 800341c:	d0c9      	beq.n	80033b2 <__sflush_r+0x1a>
 800341e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003422:	4299      	cmp	r1, r3
 8003424:	d002      	beq.n	800342c <__sflush_r+0x94>
 8003426:	4628      	mov	r0, r5
 8003428:	f000 fa22 	bl	8003870 <_free_r>
 800342c:	2000      	movs	r0, #0
 800342e:	6360      	str	r0, [r4, #52]	; 0x34
 8003430:	e7c0      	b.n	80033b4 <__sflush_r+0x1c>
 8003432:	2301      	movs	r3, #1
 8003434:	4628      	mov	r0, r5
 8003436:	47b0      	blx	r6
 8003438:	1c41      	adds	r1, r0, #1
 800343a:	d1c8      	bne.n	80033ce <__sflush_r+0x36>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0c5      	beq.n	80033ce <__sflush_r+0x36>
 8003442:	2b1d      	cmp	r3, #29
 8003444:	d001      	beq.n	800344a <__sflush_r+0xb2>
 8003446:	2b16      	cmp	r3, #22
 8003448:	d101      	bne.n	800344e <__sflush_r+0xb6>
 800344a:	602f      	str	r7, [r5, #0]
 800344c:	e7b1      	b.n	80033b2 <__sflush_r+0x1a>
 800344e:	89a3      	ldrh	r3, [r4, #12]
 8003450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	e7ad      	b.n	80033b4 <__sflush_r+0x1c>
 8003458:	690f      	ldr	r7, [r1, #16]
 800345a:	2f00      	cmp	r7, #0
 800345c:	d0a9      	beq.n	80033b2 <__sflush_r+0x1a>
 800345e:	0793      	lsls	r3, r2, #30
 8003460:	680e      	ldr	r6, [r1, #0]
 8003462:	bf08      	it	eq
 8003464:	694b      	ldreq	r3, [r1, #20]
 8003466:	600f      	str	r7, [r1, #0]
 8003468:	bf18      	it	ne
 800346a:	2300      	movne	r3, #0
 800346c:	eba6 0807 	sub.w	r8, r6, r7
 8003470:	608b      	str	r3, [r1, #8]
 8003472:	f1b8 0f00 	cmp.w	r8, #0
 8003476:	dd9c      	ble.n	80033b2 <__sflush_r+0x1a>
 8003478:	6a21      	ldr	r1, [r4, #32]
 800347a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800347c:	4643      	mov	r3, r8
 800347e:	463a      	mov	r2, r7
 8003480:	4628      	mov	r0, r5
 8003482:	47b0      	blx	r6
 8003484:	2800      	cmp	r0, #0
 8003486:	dc06      	bgt.n	8003496 <__sflush_r+0xfe>
 8003488:	89a3      	ldrh	r3, [r4, #12]
 800348a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800348e:	81a3      	strh	r3, [r4, #12]
 8003490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003494:	e78e      	b.n	80033b4 <__sflush_r+0x1c>
 8003496:	4407      	add	r7, r0
 8003498:	eba8 0800 	sub.w	r8, r8, r0
 800349c:	e7e9      	b.n	8003472 <__sflush_r+0xda>
 800349e:	bf00      	nop
 80034a0:	dfbffffe 	.word	0xdfbffffe

080034a4 <_fflush_r>:
 80034a4:	b538      	push	{r3, r4, r5, lr}
 80034a6:	690b      	ldr	r3, [r1, #16]
 80034a8:	4605      	mov	r5, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	b913      	cbnz	r3, 80034b4 <_fflush_r+0x10>
 80034ae:	2500      	movs	r5, #0
 80034b0:	4628      	mov	r0, r5
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	b118      	cbz	r0, 80034be <_fflush_r+0x1a>
 80034b6:	6a03      	ldr	r3, [r0, #32]
 80034b8:	b90b      	cbnz	r3, 80034be <_fflush_r+0x1a>
 80034ba:	f7ff fb7d 	bl	8002bb8 <__sinit>
 80034be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f3      	beq.n	80034ae <_fflush_r+0xa>
 80034c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034c8:	07d0      	lsls	r0, r2, #31
 80034ca:	d404      	bmi.n	80034d6 <_fflush_r+0x32>
 80034cc:	0599      	lsls	r1, r3, #22
 80034ce:	d402      	bmi.n	80034d6 <_fflush_r+0x32>
 80034d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034d2:	f7ff fbeb 	bl	8002cac <__retarget_lock_acquire_recursive>
 80034d6:	4628      	mov	r0, r5
 80034d8:	4621      	mov	r1, r4
 80034da:	f7ff ff5d 	bl	8003398 <__sflush_r>
 80034de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034e0:	07da      	lsls	r2, r3, #31
 80034e2:	4605      	mov	r5, r0
 80034e4:	d4e4      	bmi.n	80034b0 <_fflush_r+0xc>
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	059b      	lsls	r3, r3, #22
 80034ea:	d4e1      	bmi.n	80034b0 <_fflush_r+0xc>
 80034ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ee:	f7ff fbde 	bl	8002cae <__retarget_lock_release_recursive>
 80034f2:	e7dd      	b.n	80034b0 <_fflush_r+0xc>

080034f4 <__malloc_lock>:
 80034f4:	4801      	ldr	r0, [pc, #4]	; (80034fc <__malloc_lock+0x8>)
 80034f6:	f7ff bbd9 	b.w	8002cac <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	20000250 	.word	0x20000250

08003500 <__malloc_unlock>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__malloc_unlock+0x8>)
 8003502:	f7ff bbd4 	b.w	8002cae <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	20000250 	.word	0x20000250

0800350c <__sread>:
 800350c:	b510      	push	{r4, lr}
 800350e:	460c      	mov	r4, r1
 8003510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003514:	f000 f978 	bl	8003808 <_read_r>
 8003518:	2800      	cmp	r0, #0
 800351a:	bfab      	itete	ge
 800351c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800351e:	89a3      	ldrhlt	r3, [r4, #12]
 8003520:	181b      	addge	r3, r3, r0
 8003522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003526:	bfac      	ite	ge
 8003528:	6563      	strge	r3, [r4, #84]	; 0x54
 800352a:	81a3      	strhlt	r3, [r4, #12]
 800352c:	bd10      	pop	{r4, pc}

0800352e <__swrite>:
 800352e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003532:	461f      	mov	r7, r3
 8003534:	898b      	ldrh	r3, [r1, #12]
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	4605      	mov	r5, r0
 800353a:	460c      	mov	r4, r1
 800353c:	4616      	mov	r6, r2
 800353e:	d505      	bpl.n	800354c <__swrite+0x1e>
 8003540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003544:	2302      	movs	r3, #2
 8003546:	2200      	movs	r2, #0
 8003548:	f000 f94c 	bl	80037e4 <_lseek_r>
 800354c:	89a3      	ldrh	r3, [r4, #12]
 800354e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	4632      	mov	r2, r6
 800355a:	463b      	mov	r3, r7
 800355c:	4628      	mov	r0, r5
 800355e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003562:	f000 b973 	b.w	800384c <_write_r>

08003566 <__sseek>:
 8003566:	b510      	push	{r4, lr}
 8003568:	460c      	mov	r4, r1
 800356a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800356e:	f000 f939 	bl	80037e4 <_lseek_r>
 8003572:	1c43      	adds	r3, r0, #1
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	bf15      	itete	ne
 8003578:	6560      	strne	r0, [r4, #84]	; 0x54
 800357a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800357e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003582:	81a3      	strheq	r3, [r4, #12]
 8003584:	bf18      	it	ne
 8003586:	81a3      	strhne	r3, [r4, #12]
 8003588:	bd10      	pop	{r4, pc}

0800358a <__sclose>:
 800358a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358e:	f000 b8f7 	b.w	8003780 <_close_r>

08003592 <__swbuf_r>:
 8003592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003594:	460e      	mov	r6, r1
 8003596:	4614      	mov	r4, r2
 8003598:	4605      	mov	r5, r0
 800359a:	b118      	cbz	r0, 80035a4 <__swbuf_r+0x12>
 800359c:	6a03      	ldr	r3, [r0, #32]
 800359e:	b90b      	cbnz	r3, 80035a4 <__swbuf_r+0x12>
 80035a0:	f7ff fb0a 	bl	8002bb8 <__sinit>
 80035a4:	69a3      	ldr	r3, [r4, #24]
 80035a6:	60a3      	str	r3, [r4, #8]
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	071a      	lsls	r2, r3, #28
 80035ac:	d525      	bpl.n	80035fa <__swbuf_r+0x68>
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	b31b      	cbz	r3, 80035fa <__swbuf_r+0x68>
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	6922      	ldr	r2, [r4, #16]
 80035b6:	1a98      	subs	r0, r3, r2
 80035b8:	6963      	ldr	r3, [r4, #20]
 80035ba:	b2f6      	uxtb	r6, r6
 80035bc:	4283      	cmp	r3, r0
 80035be:	4637      	mov	r7, r6
 80035c0:	dc04      	bgt.n	80035cc <__swbuf_r+0x3a>
 80035c2:	4621      	mov	r1, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	f7ff ff6d 	bl	80034a4 <_fflush_r>
 80035ca:	b9e0      	cbnz	r0, 8003606 <__swbuf_r+0x74>
 80035cc:	68a3      	ldr	r3, [r4, #8]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	60a3      	str	r3, [r4, #8]
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	6022      	str	r2, [r4, #0]
 80035d8:	701e      	strb	r6, [r3, #0]
 80035da:	6962      	ldr	r2, [r4, #20]
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	429a      	cmp	r2, r3
 80035e0:	d004      	beq.n	80035ec <__swbuf_r+0x5a>
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	07db      	lsls	r3, r3, #31
 80035e6:	d506      	bpl.n	80035f6 <__swbuf_r+0x64>
 80035e8:	2e0a      	cmp	r6, #10
 80035ea:	d104      	bne.n	80035f6 <__swbuf_r+0x64>
 80035ec:	4621      	mov	r1, r4
 80035ee:	4628      	mov	r0, r5
 80035f0:	f7ff ff58 	bl	80034a4 <_fflush_r>
 80035f4:	b938      	cbnz	r0, 8003606 <__swbuf_r+0x74>
 80035f6:	4638      	mov	r0, r7
 80035f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035fa:	4621      	mov	r1, r4
 80035fc:	4628      	mov	r0, r5
 80035fe:	f000 f805 	bl	800360c <__swsetup_r>
 8003602:	2800      	cmp	r0, #0
 8003604:	d0d5      	beq.n	80035b2 <__swbuf_r+0x20>
 8003606:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800360a:	e7f4      	b.n	80035f6 <__swbuf_r+0x64>

0800360c <__swsetup_r>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <__swsetup_r+0xac>)
 8003610:	4605      	mov	r5, r0
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	460c      	mov	r4, r1
 8003616:	b118      	cbz	r0, 8003620 <__swsetup_r+0x14>
 8003618:	6a03      	ldr	r3, [r0, #32]
 800361a:	b90b      	cbnz	r3, 8003620 <__swsetup_r+0x14>
 800361c:	f7ff facc 	bl	8002bb8 <__sinit>
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003626:	0718      	lsls	r0, r3, #28
 8003628:	d422      	bmi.n	8003670 <__swsetup_r+0x64>
 800362a:	06d9      	lsls	r1, r3, #27
 800362c:	d407      	bmi.n	800363e <__swsetup_r+0x32>
 800362e:	2309      	movs	r3, #9
 8003630:	602b      	str	r3, [r5, #0]
 8003632:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003636:	81a3      	strh	r3, [r4, #12]
 8003638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800363c:	e034      	b.n	80036a8 <__swsetup_r+0x9c>
 800363e:	0758      	lsls	r0, r3, #29
 8003640:	d512      	bpl.n	8003668 <__swsetup_r+0x5c>
 8003642:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003644:	b141      	cbz	r1, 8003658 <__swsetup_r+0x4c>
 8003646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800364a:	4299      	cmp	r1, r3
 800364c:	d002      	beq.n	8003654 <__swsetup_r+0x48>
 800364e:	4628      	mov	r0, r5
 8003650:	f000 f90e 	bl	8003870 <_free_r>
 8003654:	2300      	movs	r3, #0
 8003656:	6363      	str	r3, [r4, #52]	; 0x34
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800365e:	81a3      	strh	r3, [r4, #12]
 8003660:	2300      	movs	r3, #0
 8003662:	6063      	str	r3, [r4, #4]
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	81a3      	strh	r3, [r4, #12]
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	b94b      	cbnz	r3, 8003688 <__swsetup_r+0x7c>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800367a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367e:	d003      	beq.n	8003688 <__swsetup_r+0x7c>
 8003680:	4621      	mov	r1, r4
 8003682:	4628      	mov	r0, r5
 8003684:	f000 f840 	bl	8003708 <__smakebuf_r>
 8003688:	89a0      	ldrh	r0, [r4, #12]
 800368a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800368e:	f010 0301 	ands.w	r3, r0, #1
 8003692:	d00a      	beq.n	80036aa <__swsetup_r+0x9e>
 8003694:	2300      	movs	r3, #0
 8003696:	60a3      	str	r3, [r4, #8]
 8003698:	6963      	ldr	r3, [r4, #20]
 800369a:	425b      	negs	r3, r3
 800369c:	61a3      	str	r3, [r4, #24]
 800369e:	6923      	ldr	r3, [r4, #16]
 80036a0:	b943      	cbnz	r3, 80036b4 <__swsetup_r+0xa8>
 80036a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036a6:	d1c4      	bne.n	8003632 <__swsetup_r+0x26>
 80036a8:	bd38      	pop	{r3, r4, r5, pc}
 80036aa:	0781      	lsls	r1, r0, #30
 80036ac:	bf58      	it	pl
 80036ae:	6963      	ldrpl	r3, [r4, #20]
 80036b0:	60a3      	str	r3, [r4, #8]
 80036b2:	e7f4      	b.n	800369e <__swsetup_r+0x92>
 80036b4:	2000      	movs	r0, #0
 80036b6:	e7f7      	b.n	80036a8 <__swsetup_r+0x9c>
 80036b8:	20000064 	.word	0x20000064

080036bc <__swhatbuf_r>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	460c      	mov	r4, r1
 80036c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c4:	2900      	cmp	r1, #0
 80036c6:	b096      	sub	sp, #88	; 0x58
 80036c8:	4615      	mov	r5, r2
 80036ca:	461e      	mov	r6, r3
 80036cc:	da0d      	bge.n	80036ea <__swhatbuf_r+0x2e>
 80036ce:	89a3      	ldrh	r3, [r4, #12]
 80036d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036d4:	f04f 0100 	mov.w	r1, #0
 80036d8:	bf0c      	ite	eq
 80036da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80036de:	2340      	movne	r3, #64	; 0x40
 80036e0:	2000      	movs	r0, #0
 80036e2:	6031      	str	r1, [r6, #0]
 80036e4:	602b      	str	r3, [r5, #0]
 80036e6:	b016      	add	sp, #88	; 0x58
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	466a      	mov	r2, sp
 80036ec:	f000 f858 	bl	80037a0 <_fstat_r>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	dbec      	blt.n	80036ce <__swhatbuf_r+0x12>
 80036f4:	9901      	ldr	r1, [sp, #4]
 80036f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80036fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80036fe:	4259      	negs	r1, r3
 8003700:	4159      	adcs	r1, r3
 8003702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003706:	e7eb      	b.n	80036e0 <__swhatbuf_r+0x24>

08003708 <__smakebuf_r>:
 8003708:	898b      	ldrh	r3, [r1, #12]
 800370a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800370c:	079d      	lsls	r5, r3, #30
 800370e:	4606      	mov	r6, r0
 8003710:	460c      	mov	r4, r1
 8003712:	d507      	bpl.n	8003724 <__smakebuf_r+0x1c>
 8003714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	6123      	str	r3, [r4, #16]
 800371c:	2301      	movs	r3, #1
 800371e:	6163      	str	r3, [r4, #20]
 8003720:	b002      	add	sp, #8
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	ab01      	add	r3, sp, #4
 8003726:	466a      	mov	r2, sp
 8003728:	f7ff ffc8 	bl	80036bc <__swhatbuf_r>
 800372c:	9900      	ldr	r1, [sp, #0]
 800372e:	4605      	mov	r5, r0
 8003730:	4630      	mov	r0, r6
 8003732:	f7ff fc21 	bl	8002f78 <_malloc_r>
 8003736:	b948      	cbnz	r0, 800374c <__smakebuf_r+0x44>
 8003738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800373c:	059a      	lsls	r2, r3, #22
 800373e:	d4ef      	bmi.n	8003720 <__smakebuf_r+0x18>
 8003740:	f023 0303 	bic.w	r3, r3, #3
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	e7e3      	b.n	8003714 <__smakebuf_r+0xc>
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	6020      	str	r0, [r4, #0]
 8003750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003754:	81a3      	strh	r3, [r4, #12]
 8003756:	9b00      	ldr	r3, [sp, #0]
 8003758:	6163      	str	r3, [r4, #20]
 800375a:	9b01      	ldr	r3, [sp, #4]
 800375c:	6120      	str	r0, [r4, #16]
 800375e:	b15b      	cbz	r3, 8003778 <__smakebuf_r+0x70>
 8003760:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003764:	4630      	mov	r0, r6
 8003766:	f000 f82d 	bl	80037c4 <_isatty_r>
 800376a:	b128      	cbz	r0, 8003778 <__smakebuf_r+0x70>
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	89a3      	ldrh	r3, [r4, #12]
 800377a:	431d      	orrs	r5, r3
 800377c:	81a5      	strh	r5, [r4, #12]
 800377e:	e7cf      	b.n	8003720 <__smakebuf_r+0x18>

08003780 <_close_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4d06      	ldr	r5, [pc, #24]	; (800379c <_close_r+0x1c>)
 8003784:	2300      	movs	r3, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fd f95b 	bl	8000a46 <_close>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_close_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_close_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	2000025c 	.word	0x2000025c

080037a0 <_fstat_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	4d07      	ldr	r5, [pc, #28]	; (80037c0 <_fstat_r+0x20>)
 80037a4:	2300      	movs	r3, #0
 80037a6:	4604      	mov	r4, r0
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	f7fd f956 	bl	8000a5e <_fstat>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d102      	bne.n	80037bc <_fstat_r+0x1c>
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	b103      	cbz	r3, 80037bc <_fstat_r+0x1c>
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
 80037be:	bf00      	nop
 80037c0:	2000025c 	.word	0x2000025c

080037c4 <_isatty_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4d06      	ldr	r5, [pc, #24]	; (80037e0 <_isatty_r+0x1c>)
 80037c8:	2300      	movs	r3, #0
 80037ca:	4604      	mov	r4, r0
 80037cc:	4608      	mov	r0, r1
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	f7fd f955 	bl	8000a7e <_isatty>
 80037d4:	1c43      	adds	r3, r0, #1
 80037d6:	d102      	bne.n	80037de <_isatty_r+0x1a>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	b103      	cbz	r3, 80037de <_isatty_r+0x1a>
 80037dc:	6023      	str	r3, [r4, #0]
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	2000025c 	.word	0x2000025c

080037e4 <_lseek_r>:
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4d07      	ldr	r5, [pc, #28]	; (8003804 <_lseek_r+0x20>)
 80037e8:	4604      	mov	r4, r0
 80037ea:	4608      	mov	r0, r1
 80037ec:	4611      	mov	r1, r2
 80037ee:	2200      	movs	r2, #0
 80037f0:	602a      	str	r2, [r5, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	f7fd f94e 	bl	8000a94 <_lseek>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d102      	bne.n	8003802 <_lseek_r+0x1e>
 80037fc:	682b      	ldr	r3, [r5, #0]
 80037fe:	b103      	cbz	r3, 8003802 <_lseek_r+0x1e>
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	bd38      	pop	{r3, r4, r5, pc}
 8003804:	2000025c 	.word	0x2000025c

08003808 <_read_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4d07      	ldr	r5, [pc, #28]	; (8003828 <_read_r+0x20>)
 800380c:	4604      	mov	r4, r0
 800380e:	4608      	mov	r0, r1
 8003810:	4611      	mov	r1, r2
 8003812:	2200      	movs	r2, #0
 8003814:	602a      	str	r2, [r5, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	f7fd f8dc 	bl	80009d4 <_read>
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d102      	bne.n	8003826 <_read_r+0x1e>
 8003820:	682b      	ldr	r3, [r5, #0]
 8003822:	b103      	cbz	r3, 8003826 <_read_r+0x1e>
 8003824:	6023      	str	r3, [r4, #0]
 8003826:	bd38      	pop	{r3, r4, r5, pc}
 8003828:	2000025c 	.word	0x2000025c

0800382c <_sbrk_r>:
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4d06      	ldr	r5, [pc, #24]	; (8003848 <_sbrk_r+0x1c>)
 8003830:	2300      	movs	r3, #0
 8003832:	4604      	mov	r4, r0
 8003834:	4608      	mov	r0, r1
 8003836:	602b      	str	r3, [r5, #0]
 8003838:	f7fd f93a 	bl	8000ab0 <_sbrk>
 800383c:	1c43      	adds	r3, r0, #1
 800383e:	d102      	bne.n	8003846 <_sbrk_r+0x1a>
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	b103      	cbz	r3, 8003846 <_sbrk_r+0x1a>
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	2000025c 	.word	0x2000025c

0800384c <_write_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4d07      	ldr	r5, [pc, #28]	; (800386c <_write_r+0x20>)
 8003850:	4604      	mov	r4, r0
 8003852:	4608      	mov	r0, r1
 8003854:	4611      	mov	r1, r2
 8003856:	2200      	movs	r2, #0
 8003858:	602a      	str	r2, [r5, #0]
 800385a:	461a      	mov	r2, r3
 800385c:	f7fd f8d7 	bl	8000a0e <_write>
 8003860:	1c43      	adds	r3, r0, #1
 8003862:	d102      	bne.n	800386a <_write_r+0x1e>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	b103      	cbz	r3, 800386a <_write_r+0x1e>
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	2000025c 	.word	0x2000025c

08003870 <_free_r>:
 8003870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003872:	2900      	cmp	r1, #0
 8003874:	d044      	beq.n	8003900 <_free_r+0x90>
 8003876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800387a:	9001      	str	r0, [sp, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f1a1 0404 	sub.w	r4, r1, #4
 8003882:	bfb8      	it	lt
 8003884:	18e4      	addlt	r4, r4, r3
 8003886:	f7ff fe35 	bl	80034f4 <__malloc_lock>
 800388a:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <_free_r+0x94>)
 800388c:	9801      	ldr	r0, [sp, #4]
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	b933      	cbnz	r3, 80038a0 <_free_r+0x30>
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6014      	str	r4, [r2, #0]
 8003896:	b003      	add	sp, #12
 8003898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800389c:	f7ff be30 	b.w	8003500 <__malloc_unlock>
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d908      	bls.n	80038b6 <_free_r+0x46>
 80038a4:	6825      	ldr	r5, [r4, #0]
 80038a6:	1961      	adds	r1, r4, r5
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1949      	addeq	r1, r1, r5
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	e7ed      	b.n	8003892 <_free_r+0x22>
 80038b6:	461a      	mov	r2, r3
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b10b      	cbz	r3, 80038c0 <_free_r+0x50>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d9fa      	bls.n	80038b6 <_free_r+0x46>
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	1855      	adds	r5, r2, r1
 80038c4:	42a5      	cmp	r5, r4
 80038c6:	d10b      	bne.n	80038e0 <_free_r+0x70>
 80038c8:	6824      	ldr	r4, [r4, #0]
 80038ca:	4421      	add	r1, r4
 80038cc:	1854      	adds	r4, r2, r1
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	d1e0      	bne.n	8003896 <_free_r+0x26>
 80038d4:	681c      	ldr	r4, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	6053      	str	r3, [r2, #4]
 80038da:	440c      	add	r4, r1
 80038dc:	6014      	str	r4, [r2, #0]
 80038de:	e7da      	b.n	8003896 <_free_r+0x26>
 80038e0:	d902      	bls.n	80038e8 <_free_r+0x78>
 80038e2:	230c      	movs	r3, #12
 80038e4:	6003      	str	r3, [r0, #0]
 80038e6:	e7d6      	b.n	8003896 <_free_r+0x26>
 80038e8:	6825      	ldr	r5, [r4, #0]
 80038ea:	1961      	adds	r1, r4, r5
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf04      	itt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	bf04      	itt	eq
 80038f8:	1949      	addeq	r1, r1, r5
 80038fa:	6021      	streq	r1, [r4, #0]
 80038fc:	6054      	str	r4, [r2, #4]
 80038fe:	e7ca      	b.n	8003896 <_free_r+0x26>
 8003900:	b003      	add	sp, #12
 8003902:	bd30      	pop	{r4, r5, pc}
 8003904:	20000254 	.word	0x20000254

08003908 <_init>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr

08003914 <_fini>:
 8003914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003916:	bf00      	nop
 8003918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391a:	bc08      	pop	{r3}
 800391c:	469e      	mov	lr, r3
 800391e:	4770      	bx	lr
